#########################################################################################################################

Title: 1.3.1 Ensure AIDE is installed (Automated)

Evidence: 
dpkg-query: no packages found matching aide
dpkg-query: no packages found matching aide-common

Rationale: 
By monitoring the filesystem state compromised files can be detected to prevent or limit the exposure of accidental or malicious misconfigurations or modified binaries.

Remediation: 
Run the following command to Install AIDE using the appropriate package manager or manual installation:
1. apt install aide aide-common
Configure AIDE as appropriate for your environment. Consult the AIDE documentation for options. Run the following commands to initialize AIDE:
2. aideinit
3. mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db

Explanation: 
This audit is to verify that AIDE is installed, since evidence displayed is unable to verify audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.3.2 Ensure filesystem integrity is regularly checked (Automated)

Evidence: 
Neither cron or aidecheck.service and aidecheck.timer is used to schedule and run aide check

Rationale: 
Periodic file checking allows the system administrator to determine on a regular basis if critical files have been changed in an unauthorized fashion.

Remediation: 
If cron will be used to schedule and run aide check:
Run the following command:
1. crontab -u root -e
add the following line to the crontab:
0 5 * * * /usr/bin/aide.wrapper --config /etc/aide/aide.conf --check

OR

If aidecheck.service and aidecheck.timer will be used to schedule and run aide check:
Create or edit the file /etc/systemd/system/aidecheck.service and add the following lines:
[Unit]
Description=Aide Check

[Service]
Type=simple
ExecStart=/usr/bin/aide.wrapper --config /etc/aide/aide.conf --check

[Install]
WantedBy=multi-user.target

Create or edit the file /etc/systemd/system/aidecheck.timer and add the following lines:
[Unit]
Description=Aide check every day at 5AM

[Timer]
OnCalendar=*-*-* 05:00:00
Unit=aidecheck.service

[Install]
WantedBy=multi-user.target

Run the following commands:
1. chown root:root /etc/systemd/system/aidecheck.*
2. chmod 0644 /etc/systemd/system/aidecheck.*
3. systemctl daemon-reload
4. systemctl enable aidecheck.service
5. systemctl --now enable aidecheck.timer

Explanation: 
This audit is to verify that filesystem intergrity is regularly checked, since evidence displayed is unable to verify audit, therefore compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.4.1 Ensure bootloader password is set (Automated)

Evidence: 
Desired output for audit, set superusers="<username>" and password_pbkdf2 <username> <encrypted-password>, not returned.

Rationale: 
Requiring a boot password upon execution of the boot loader will prevent an unauthorized user from entering boot parameters or changing the boot partition. This prevents users from weakening security (e.g. turning off AppArmor at boot time).

Remediation: 
Create an encrypted password with grub-mkpasswd-pbkdf2:
grub-mkpasswd-pbkdf2

Enter password: <password>
Reenter password: <password>
PBKDF2 hash of your password is <encrypted-password>

Add the following into a custom /etc/grub.d configuration file:
cat <<EOF
set superusers="<username>"
password_pbkdf2 <username> <encrypted-password>
EOF

The superuser/user information and password should not be contained in the /etc/grub.d/00_header file as this file could be overwritten in a package update. If there is a requirement to be able to boot/reboot without entering the password, edit /etc/grub.d/10_linux and add --unrestricted to the line CLASS=
Example:
CLASS="--class gnu-linux --class gnu --class os --unrestricted"

Run the following command to update the grub2 configuration:
update-grub

Explanation: 
This audit is to verify bootloader password is set, since evidence displayed did not return desired output, therefore compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.4.2 Ensure permissions on bootloader config are configured (Automated)

Evidence: 
Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)

Rationale: 
Setting the permissions to read and write for root only prevents non-root users from seeing the boot parameters or changing them. Non-root users who read the boot parameters may be able to identify weaknesses in security upon boot and be able to exploit them.

Remediation: 
Run the following commands to set permissions on your grub configuration:
1. chown root:root /boot/grub/grub.cfg
2. chmod u-wx,go-rwx /boot/grub/grub.cfg

Explanation: 
This audit is to verify that permissions on bootloader config are configured, both UID and GID are 0/root and Access is 0400 or more restrictive for the file /boot/grub/grub.cfg, since the evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.4.3 Ensure authentication required for single user mode (Automated)

Evidence: 
root is locked

Rationale: 
Requiring authentication in single user mode prevents an unauthorized user from rebooting the system into single user to gain root privileges without credentials.

Remediation: 
Run the following command and follow the prompts to set a password for the root user:
passwd root

Explanation: 
This audit is to verify that authentication required for single user mode, no results should be returned, since the evidence displayed returned root is locked, unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.5.1 Ensure address space layout randomization (ASLR) is enabled (Automated)

Evidence: 

Fail: "kernel.randomize_va_space = 2" is not set in a kernel parameter configuration file

Rationale: 
Randomly placing virtual memory regions will make it difficult to write memory page exploits as the memory placement will be consistently shifting.

Remediation: 
Set the following parameter in /etc/sysctl.conf or a /etc/sysctl.d/* file:
Example:
printf  kernel.randomize_va_space = 2  >> /etc/sysctl.d/60-kernel_sysctl.con

Run the following command to set the active kernel parameter:
sysctl -w kernel.randomize_va_space=2

Explanation: 
This audit is to verify that address space layout randomization (ASLR) is enabled, since evidence displayed is unable to verify audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.5.3 Ensure Automatic Error Reporting is not enabled (Automated)

Evidence: 
enabled=1
active

Rationale: 
Apport collects potentially sensitive data, such as core dumps, stack traces, and log files. They can contain passwords, credit card numbers, serial numbers, and other private material.

Remediation: 
Edit /etc/default/apport and add or edit the enabled parameter to equal 0:
enabled=0

Run the following commands to stop and disable the apport service:
1. systemctl stop apport.service
2. systemctl --now disable apport.service

OR

Run the following command to remove the apport package:
apt purge apport

Explanation: 
This audit is to verify that automatic error reporting is not enabled, since evidence is unable to verify audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.5.4 Ensure core dumps are restricted (Automated)

Evidence: 
1. '* hard core 0' not returned
2. fs.suid_dumpable = 2
3. 'fs.suid_dumpable = 0' not returned
4. Failed to get unit file state for coredump.service: No such file or directory

Rationale: 
Setting a hard limit on core dumps prevents users from overriding the soft variable. If core dumps are required, consider setting limits for user groups (see limits.conf(5) ). In addition, setting the fs.suid_dumpable variable to 0 will prevent setuid programs from dumping core.

Remediation: 
Add the following line to /etc/security/limits.conf or a /etc/security/limits.d/* file:
* hard core 0

Set the following parameter in /etc/sysctl.conf or a /etc/sysctl.d/* file:
fs.suid_dumpable = 0

Run the following command to set the active kernel parameter:
sysctl -w fs.suid_dumpable=0

IF systemd-coredump is installed:
edit /etc/systemd/coredump.conf and add/modify the following lines:
Storage=none
ProcessSizeMax=0

Run the command:
systemctl daemon-reload

Explanation: 
This audit is to verify that core dumps are restricted, since the evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.6.1.2 Ensure AppArmor is enabled in the bootloader configuration (Automated)

Evidence: 
1.
	linux	/vmlinuz-5.15.0-78-generic root=/dev/mapper/ubuntu--vg-ubuntu--lv ro  
		linux	/vmlinuz-5.15.0-78-generic root=/dev/mapper/ubuntu--vg-ubuntu--lv ro  
		linux	/vmlinuz-5.15.0-78-generic root=/dev/mapper/ubuntu--vg-ubuntu--lv ro recovery nomodeset dis_ucode_ldr 
		linux	/vmlinuz-5.15.0-76-generic root=/dev/mapper/ubuntu--vg-ubuntu--lv ro  
		linux	/vmlinuz-5.15.0-76-generic root=/dev/mapper/ubuntu--vg-ubuntu--lv ro recovery nomodeset dis_ucode_ldr 
	linux16	/memtest86+.bin console=ttyS0,115200n8
2.
	linux	/vmlinuz-5.15.0-78-generic root=/dev/mapper/ubuntu--vg-ubuntu--lv ro  
		linux	/vmlinuz-5.15.0-78-generic root=/dev/mapper/ubuntu--vg-ubuntu--lv ro  
		linux	/vmlinuz-5.15.0-78-generic root=/dev/mapper/ubuntu--vg-ubuntu--lv ro recovery nomodeset dis_ucode_ldr 
		linux	/vmlinuz-5.15.0-76-generic root=/dev/mapper/ubuntu--vg-ubuntu--lv ro  
		linux	/vmlinuz-5.15.0-76-generic root=/dev/mapper/ubuntu--vg-ubuntu--lv ro recovery nomodeset dis_ucode_ldr 
	linux16	/memtest86+.bin console=ttyS0,115200n8

Rationale: 
AppArmor must be enabled at boot time in your bootloader configuration to ensure that the controls it provides are not overridden.

Remediation: 
Edit /etc/default/grub and add the apparmor=1 and security=apparmor parameters to the GRUB_CMDLINE_LINUX= line:
GRUB_CMDLINE_LINUX="apparmor=1 security=apparmor"

Run the following command to update the grub2 configuration:
update-grub

Explanation: 
This audit is to verify that AppArmor is enabled in the bootloader configuration, no results should be returned, since evidence is unable to verify audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.6.1.4 Ensure all AppArmor Profiles are enforcing (Automated)

Evidence: 
1.
53 profiles are loaded.
50 profiles are in enforce mode.
3 profiles are in complain mode.
0 profiles are in kill mode.
0 profiles are in unconfined mode.
10 processes have profiles defined.
2.
10 processes have profiles defined.
10 processes are in enforce mode.
0 processes are in complain mode.
0 processes are unconfined but have a profile defined.
0 processes are in mixed mode.
0 processes are in kill mode.

Rationale: 
Security configuration requirements vary from site to site. Some sites may mandate a policy that is stricter than the default policy, which is perfectly acceptable. This item is intended to ensure that any policies that exist on the system are activated.

Remediation: 
Run the following command to set all profiles to enforce mode:
aa-enforce /etc/apparmor.d/*

Explanation: 
This audit is to verify that all AppArmor Profiles are enforcing, since the evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.8.1 Ensure GNOME Display Manager is removed (Automated)

Evidence: 
gdm3	install ok installed	installed

Rationale: 
If a Graphical User Interface (GUI) is not required, it should be removed to reduce the attack surface of the system.

Remediation: 
Run the following command to uninstall gdm3:
apt purge gdm3

Explanation: 
This audit is to verify that GNOME Display Manager is removed, gdm3 is not installed, since the evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.8.2 Ensure GDM login banner is configured (Automated)

Evidence: 

 - Package: "gdm3" exists on the system
 - checking configuration

- Audit Result:
 ** FAIL **
 - Reason(s) for audit failure:

 - The "banner-message-enable" option isn't configured

Rationale: 
Warning messages inform users who are attempting to login to the system of their legal status regarding the system and must include the name of the organization that owns the system and any monitoring policies that are in place.

Remediation: 
Run the following script:

#!/usr/bin/env bash
{
        l_pkgoutput=""
        if command -v dpkg-query > /dev/null 2>&1; then
                l_pq="dpkg-query -W"
        elif command -v rpm > /dev/null 2>&1; then
                l_pq="rpm -q"
        fi
        l_pcl="gdm gdm3" # Space separated list of packages to check
        for l_pn in $l_pcl; do
                $l_pq "$l_pn" > /dev/null 2>&1 && l_pkgoutput="$l_pkgoutput\n - Package: \"$l_pn\" exists on the system\n - checking configuration"
        done
        if [ -n "$l_pkgoutput" ]; then
                l_gdmprofile="gdm" # Set this to desired profile name IaW Local site policy
                l_bmessage="Authorized uses only. All activity may be monitored and reported" # Set to desired banner message
                if [ ! -f "/etc/dconf/profile/$l_gdmprofile" ]; then
                        echo "Creating profile \"$l_gdmprofile\""
                        echo -e "user-db:user\nsystem-db:$l_gdmprofile\nfile-db:/usr/share/$l_gdmprofile/greeter-dconf-defaults" > /etc/dconf/profile/$l_gdmprofile
                fi
                if [ ! -d "/etc/dconf/db/$l_gdmprofile.d/" ]; then
                        echo "Creating dconf database directory \"/etc/dconf/db/$l_gdmprofile.d/\""
                        mkdir /etc/dconf/db/$l_gdmprofile.d/
                fi
                if ! grep -Piq "^\h*banner-message-enable\h*=\h*true\b" /etc/dconf/db/$l_gdmprofile.d/*; then
                        echo "creating gdm keyfile for machine-wide settings"
                        if ! grep -Piq -- "^\h*banner-message-enable\h*=\h*" /etc/dconf/db/$l_gdmprofile.d/*; then
                                l_kfile="/etc/dconf/db/$l_gdmprofile.d/01-banner-message"
                                echo -e "\n[org/gnome/login-screen]\nbanner-message-enable=true" >> "$l_kfile"
                        else
                                l_kfile="$(grep -Pil -- "^\h*banner-message-enable\h*=\h*" /etc/dconf/db/$l_gdmprofile.d/*)"
                                ! grep -Pq "^\h*\[org\/gnome\/login-screen\]" "$l_kfile" && sed -ri "/^\s*banner-message-enable/ i\[org/gnome/login-screen]" "$l_kfile"
                                ! grep -Pq "^\h*banner-message-enable\h*=\h*true\b" "$l_kfile" && sed -ri "s/^\s*(banner-message-enable\s*=\s*)(\S+)(\s*.*$)/\1true \3//" "$l_kfile"
                                # sed -ri "/^\s*\[org\/gnome\/login-screen\]/ a\\nbanner-message-enable=true" "$l_kfile"
                        fi
                fi
                if ! grep -Piq "^\h*banner-message-text=[\'\"]+\S+" "$l_kfile"; then
                        sed -ri "/^\s*banner-message-enable/ a\banner-message-text=$l_bmessage" "$l_kfile"
                fi
                dconf update
        else
                echo -e "\n\n - GNOME Desktop Manager isnt installed\n - Recommendation is Not Applicable\n - No remediation required\n"
        fi
}

OR

Run the following command to remove the gdm3 package:
apt purge gdm3

Explanation: 
This audit is to verify GDM login banner is configured, text banner on the login screen is enabled and set, since the evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.8.3 Ensure GDM disable-user-list option is enabled (Automated)

Evidence: 

 - Package: "gdm3" exists on the system
 - checking configuration

- Audit Result:
 *** FAIL: ***

 - The "disable-user-list" option is not enabled

Rationale: 
Displaying the user list eliminates half of the Userid/Password equation that an unauthorized person would need to log on.

Remediation: 
Run the following script to enable the disable-user-list option:

#!/usr/bin/env bash

{
        l_gdmprofile="gdm"
        if [ ! -f "/etc/dconf/profile/$l_gdmprofile" ]; then
                echo "Creating profile \"$l_gdmprofile\""
                echo -e "user-db:user\nsystem-db:$l_gdmprofile\nfile-db:/usr/share/$l_gdmprofile/greeter-dconf-defaults" > /etc/dconf/profile/$l_gdmprofile
        fi
        if [ ! -d "/etc/dconf/db/$l_gdmprofile.d/" ]; then
                echo "Creating dconf database directory \"/etc/dconf/db/$l_gdmprofile.d/\""
                mkdir /etc/dconf/db/$l_gdmprofile.d/
        fi
        if ! grep -Piq ^h*disable-user-listh*=h*trueb /etc/dconf/db/$l_gdmprofile.d/*; then
                echo "creating gdm keyfile for machine-wide settings"
                if ! grep -Piq -- ^h*[org/gnome/login-screen] /etc/dconf/db/$l_gdmprofile.d/*; then
                        echo -e "\n[org/gnome/login-screen]\n# Do not show the user list\ndisable-user-list=true" >> /etc/dconf/db/$l_gdmprofile.d/00-login-screen
                else
                        sed -ri /^s*[org/gnome/login-screen]/ a# Do not show the user listndisable-user-list=true $(grep -Pil -- ^h*[org/gnome/login-screen] /etc/dconf/db/$l_gdmprofile.d/*)
                fi
        fi
        dconf update
}

OR

Run the following command to remove the GNOME package:
apt purge gdm3

Explanation: 
This audit it to verify GDM disable-user-list option is enabled, disable-user-list option is enabled or GNOME isn't installed, since the evidence displayed is unable to verify the audit, therefore the compliane is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.8.4 Ensure GDM screen locks when the user is idle (Automated)

Evidence: 


 - Package: "gdm3" exists on the system
 - checking configuration

- Audit Result:
 ** FAIL **
 - Reason(s) for audit failure:

 - The "idle-delay" option doesn't exist, remaining tests skipped

Rationale: 
Setting a lock-out value reduces the window of opportunity for unauthorized user access to another user's session that has been left unattended.

Remediation: 
Create or edit a file in the /etc/dconf/profile/ and verify it includes the following:
user-db:user
system-db:{NAME_OF_DCONF_DATABASE}
Note: local is the name of a dconf database used in the examples.
Example:
echo -e '\nuser-db:user\nsystem-db:local' >> /etc/dconf/profile/user
Create the directory /etc/dconf/db/{NAME_OF_DCONF_DATABASE}.d/ if it doesn't already exist:
Example:
mkdir /etc/dconf/db/local.d
Create the key file `/etc/dconf/db/{NAME_OF_DCONF_DATABASE}.d/{FILE_NAME} to provide information for the {NAME_OF_DCONF_DATABASE} database:
Example script:

#!/usr/bin/env bash

{
        l_key_file="/etc/dconf/db/local.d/00-screensaver"
        l_idmv="900" # Set max value for idle-delay in seconds (between 1 and 900)
        l_ldmv="5" # Set max value for lock-delay in seconds (between 0 and 5)
        {
                echo '# Specify the dconf path'
                echo '[org/gnome/desktop/session]'
                echo ''
                echo '# Number of seconds of inactivity before the screen goes blank'
                echo '# Set to 0 seconds if you want to deactivate the screensaver.'
                echo "idle-delay=uint32 $l_idmv"
                echo ''
                echo '# Specify the dconf path'
                echo '[org/gnome/desktop/screensaver]'
                echo ''
                echo '# Number of seconds after the screen is blank before locking the screen'
                echo "lock-delay=uint32 $l_ldmv"
        } > "$l_key_file"
}
Note: You must include the uint32 along with the integer key values as shown.

Run the following command to update the system databases:
dconf update
Note: Users must log out and back in again before the system-wide settings take effect.

Explanation: 
This audit is to verify that GDM screen locks when the user is idle, since the evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.8.5 Ensure GDM screen locks cannot be overridden (Automated)

Evidence: 


 - Package: "gdm3" exists on the system
 - checking configuration

- Audit Result:
 ** FAIL **
 - Reason(s) for audit failure:

 - "idle-delay" is not set so it can not be locked
 - "lock-delay" is not set so it can not be locked

Rationale: 
Setting a lock-out value reduces the window of opportunity for unauthorized user access to another user's session that has been left unattended.
Without locking down the system settings, user settings take precedence over the system settings.

Remediation: 
Run the following script to ensure screen locks can not be overridden:

#!/usr/bin/env bash

{
        # Check if GNMOE Desktop Manager is installed. If package isn't installed, recommendation is Not Applicable\n
        # determine system's package manager
        l_pkgoutput=""
        if command -v dpkg-query > /dev/null 2>&1; then
                l_pq="dpkg-query -W"
        elif command -v rpm > /dev/null 2>&1; then
                l_pq="rpm -q"
        fi
        # Check if GDM is installed
        l_pcl="gdm gdm3" # Space seporated list of packages to check
        for l_pn in $l_pcl; do
                $l_pq "$l_pn" > /dev/null 2>&1 && l_pkgoutput="y" && echo -e "\n -Package: \"$l_pn\" exists on the system\n - remediating configuration if needed"
        done
        # Check configuration (If applicable)
        if [ -n "$l_pkgoutput" ]; then
                # Look for idle-delay to determine profile in use, needed for remaining tests
                l_kfd="/etc/dconf/db/$(grep -Psril '^\h*idledelay\h*=\h*uint32\h+\d+\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,".");print a[1]}' ).d" #set directory of key file to be locked
                # Look for lock-delay to determine profile in use, needed for remaining tests
                l_kfd2="/etc/dconf/db/$(grep -Psril '^\h*lockdelay\h*=\h*uint32\h+\d+\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,".");print a[1]}' ).d" #set directory of key file to be locked
                if [ -d "$l_kfd" ]; then # If key file directory doesnt exist, options cant be locked
                        if grep -Prilq ^h*/org/gnome/desktop/session/idle-delayb "$l_kfd"; then
                                echo " - \"idle-delay\" is locked in \"$(grep -Pril ^h*/org/gnome/desktop/session/idle-delayb "$l_kfd")\""
                        else
                                echo "creating entry to lock \"idle-delay\""
                                [ ! -d "$l_kfd"/locks ] && echo "creating directory $l_kfd/locks" && mkdir "$l_kfd"/locks
                                {
                                        echo -e '\n# Lock desktop screensaver idle-delay setting'
                                        echo '/org/gnome/desktop/session/idle-delay'
                                } >> "$l_kfd"/locks/00-screensaver
                        fi
                else
                        echo -e " - \"idle-delay\" is not set so it can not be locked\n - Please follow Recommendation \"Ensure GDM screen locks when the user is idle\" and follow this Recommendation again"
                fi
                if [ -d "$l_kfd2" ]; then # If key file directory doesnt exist, options cant be locked
                        if grep -Prilq ^h*/org/gnome/desktop/screensaver/lockdelayb "$l_kfd2"; then
                                echo " - \"lock-delay\" is locked in \"$(grep -Pril ^h*/org/gnome/desktop/screensaver/lock-delayb "$l_kfd2")\""
                        else
                                echo "creating entry to lock \"lock-delay\""
                                [ ! -d "$l_kfd2"/locks ] && echo "creating directory $l_kfd2/locks" && mkdir "$l_kfd2"/locks
                                {
                                        echo -e '\n# Lock desktop screensaver lock-delay setting'
                                        echo '/org/gnome/desktop/screensaver/lock-delay'
                                } >> "$l_kfd2"/locks/00-screensaver
                        fi
                else
                        echo -e " - \"lock-delay\" is not set so it can not be locked\n - Please follow Recommendation \"Ensure GDM screen locks when the user is idle\" and follow this Recommendation again"
                fi
        else
                echo -e " - GNOME Desktop Manager package is not installed on the system\n - Recommendation is not applicable"
        fi
}

Run the following command to update the system databases:
dconf update
Note: Users must log out and back in again before the system-wide settings take effect.

Explanation: 
This audit is to verify GDM screen locks cannot be overridden, since evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.8.6 Ensure GDM automatic mounting of removable media is disabled (Automated)

Evidence: 

 - Package: "gdm3" exists on the system
 - checking configuration

- Audit Result:
 ** FAIL **
 - Reason(s) for audit failure:

 - neither "automount" or "automount-open" is set

Rationale: 
With automounting enabled anyone with physical access could attach a USB drive or disc and have its contents available in system even if they lacked permissions to mount it themselves.

Remediation: 
Run the following script to disable automatic mounting of media for all GNOME users:

#!/usr/bin/env bash

{
        l_pkgoutput="" l_output="" l_output2=""
        l_gpbame="local" # Set to desired dconf profile name (defaule is local)
        # Check if GNOME Desktop Manager is installed. If package isn't installed, recommendation is Not Applicable\n
        # determine system's package manager
        if command -v dpkg-query > /dev/null 2>&1; then
                l_pq="dpkg-query -W"
        elif command -v rpm > /dev/null 2>&1; then
                l_pq="rpm -q"
        fi
        # Check if GDM is installed
        l_pcl="gdm gdm3" # Space seporated list of packages to check
        for l_pn in $l_pcl; do
                $l_pq "$l_pn" > /dev/null 2>&1 && l_pkgoutput="$l_pkgoutput\n - Package: \"$l_pn\" exists on the system\n - checking configuration"
        done
        echo -e "$l_packageout"
        # Check configuration (If applicable)
        if [ -n "$l_pkgoutput" ]; then
                echo -e "$l_pkgoutput"
                # Look for existing settings and set variables if they exist
                l_kfile="$(grep -Prils -- ^h*automountb /etc/dconf/db/*.d)"
                l_kfile2="$(grep -Prils -- ^h*automount-openb /etc/dconf/db/*.d)"
                # Set profile name based on dconf db directory ({PROFILE_NAME}.d)
                if [ -f "$l_kfile" ]; then
                        l_gpname="$(awk -F\/ '{split($(NF-1),a,".");print a[1]}' <<< "$l_kfile")"
                        echo " - updating dconf profile name to \"$l_gpname\""
                elif [ -f "$l_kfile2" ]; then
                        l_gpname="$(awk -F\/ '{split($(NF-1),a,".");print a[1]}' <<< "$l_kfile2")"
                        echo " - updating dconf profile name to \"$l_gpname\""
                fi
                # check for consistency (Clean up configuration if needed)
                if [ -f "$l_kfile" ] && [ "$(awk -F\/ '{split($(NF-1),a,".");print a[1]}' <<< "$l_kfile")" != "$l_gpname" ]; then
                        sed -ri "/^\s*automount\s*=/s/^/# /" "$l_kfile"
                        l_kfile="/etc/dconf/db/$l_gpname.d/00-media-automount"
                fi
                if [ -f "$l_kfile2" ] && [ "$(awk -F\/ '{split($(NF-1),a,".");print a[1]}' <<< "$l_kfile2")" != "$l_gpname" ]; then
                        sed -ri "/^\s*automount-open\s*=/s/^/# /" "$l_kfile2"
                fi
                [ -n "$l_kfile" ] && l_kfile="/etc/dconf/db/$l_gpname.d/00-media-automount"
                # Check if profile file exists
                if grep -Pq -- "^\h*system-db:$l_gpname\b" /etc/dconf/profile/*; then
                        echo -e "\n - dconf database profile exists in: \"$(grep -Pl -- "^\h*system-db:$l_gpname\b" /etc/dconf/profile/*)\""
                else
                        [ ! -f "/etc/dconf/profile/user" ] && l_gpfile="/etc/dconf/profile/user" || l_gpfile="/etc/dconf/profile/user2"
                        echo -e " - creating dconf database profile"
                        {
                                echo -e "\nuser-db:user"
                                echo "system-db:$l_gpname"
                        } >> "$l_gpfile"
                fi
                # create dconf directory if it doesn't exists
                l_gpdir="/etc/dconf/db/$l_gpname.d"
                if [ -d "$l_gpdir" ]; then
                        echo " - The dconf database directory \"$l_gpdir\" exists"
                else
                        echo " - creating dconf database directory \"$l_gpdir\""
                        mkdir "$l_gpdir"
                fi
                # check automount-open setting
                if grep -Pqs -- ^h*automount-openh*=h*falseb "$l_kfile"; then
                        echo " - \"automount-open\" is set to false in: \"$l_kfile\""
                else
                        echo " - creating \"automount-open\" entry in \"$l_kfile\""
                        ! grep -Psq -- ^h*[org/gnome/desktop/media-handling]b "$l_kfile" && echo [org/gnome/desktop/media-handling] >> "$l_kfile"
                        sed -ri '/^\s*\[org\/gnome\/desktop\/media-handling\]/a\nautomount-open=false'
                fi
                # check automount setting
                if grep -Pqs -- ^h*automounth*=h*falseb "$l_kfile"; then
                        echo " - \"automount\" is set to false in: \"$l_kfile\""
                else
                        echo " - creating \"automount\" entry in \"$l_kfile\""
                        ! grep -Psq -- ^h*[org/gnome/desktop/media-handling]b "$l_kfile" && echo [org/gnome/desktop/media-handling] >> "$l_kfile"
                        sed -ri '/^\s*\[org\/gnome\/desktop\/media-handling\]/a\nautomount=false'
                fi
        else
                echo -e "\n - GNOME Desktop Manager package is not installed on the system\n - Recommendation is not applicable"
        fi
        # update dconf database
        dconf update
}

OR

Run the following command to uninstall the GNOME desktop Manager package:
apt purge gdm3

Explanation: 
This audit is to verify GDM automatic mounting of removable media is disabled, since the evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.8.7 Ensure GDM disabling automatic mounting of removable media is not overridden (Automated)

Evidence: 


 - Package: "gdm3" exists on the system
 - checking configuration

- Audit Result:
 ** FAIL **
 - Reason(s) for audit failure:

 - "automount" is not set, so it cannot be locked
 - "automount-open" is not set, so it cannot be locked

Rationale: 
With automounting enabled anyone with physical access could attach a USB drive or disc and have its contents available in system even if they lacked permissions to mount it themselves.

Remediation: 
Run the following script to lock disable automatic mounting of media for all GNOME users:

#!/usr/bin/env bash

{
        # Check if GNMOE Desktop Manager is installed. If package isn't installed, recommendation is Not Applicable\n
        # determine system's package manager
        l_pkgoutput=""
        if command -v dpkg-query > /dev/null 2>&1; then
                l_pq="dpkg-query -W"
        elif command -v rpm > /dev/null 2>&1; then
                l_pq="rpm -q"
        fi
        # Check if GDM is installed
        l_pcl="gdm gdm3" # Space seporated list of packages to check
        for l_pn in $l_pcl; do
                $l_pq "$l_pn" > /dev/null 2>&1 && l_pkgoutput="y" && echo -e "\n - Package: \"$l_pn\" exists on the system\n - remediating configuration if needed"
        done
        # Check configuration (If applicable)
        if [ -n "$l_pkgoutput" ]; then
                # Look for automount to determine profile in use, needed for remaining tests
                l_kfd="/etc/dconf/db/$(grep -Psril '^\h*automount\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,".");print a[1]}' ).d" #set directory of key file to be locked
                # Look for automount-open to determine profile in use, needed for remaining tests
                l_kfd2="/etc/dconf/db/$(grep -Psril '^\h*automount-open\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,".");print a[1]}' ).d" #set directory of key file to be locked
                if [ -d "$l_kfd" ]; then # If key file directory doesnt exist, options cant be locked
                        if grep -Priq ^h*/org/gnome/desktop/mediahandling/automountb "$l_kfd"; then
                                echo " - \"automount\" is locked in \"$(grep -Pril ^h*/org/gnome/desktop/media-handling/automountb "$l_kfd")\""
                        else
                                echo " - creating entry to lock \"automount\""
                                [ ! -d "$l_kfd"/locks ] && echo "creating directory $l_kfd/locks" && mkdir "$l_kfd"/locks
                                {
                                        echo -e '\n# Lock desktop media-handling automount setting'
                                        echo '/org/gnome/desktop/media-handling/automount'
                                } >> "$l_kfd"/locks/00-media-automount
                        fi
                else
                        echo -e " - \"automount\" is not set so it can not be locked\n - Please follow Recommendation \"Ensure GDM automatic mounting of removable media is disabled\" and follow this Recommendation again"
                fi
                if [ -d "$l_kfd2" ]; then # If key file directory doesnt exist, options cant be locked
                        if grep -Priq ^h*/org/gnome/desktop/media-handling/automountopenb "$l_kfd2"; then
                                echo " - \"automount-open\" is locked in \"$(grep -Pril ^h*/org/gnome/desktop/media-handling/automount-openb "$l_kfd2")\""
                        else
                                echo " - creating entry to lock \"automount-open\""
                                [ ! -d "$l_kfd2"/locks ] && echo "creating directory $l_kfd2/locks" && mkdir "$l_kfd2"/locks
                                {
                                        echo -e '\n# Lock desktop media-handling automount-open setting'
                                        echo '/org/gnome/desktop/media-handling/automount-open'
                                } >> "$l_kfd2"/locks/00-media-automount
                        fi
                else
                        echo -e " - \"automount-open\" is not set so it can not be locked\n - Please follow Recommendation \"Ensure GDM automatic mounting of removable media is disabled\" and follow this Recommendation again"
                fi
                # update dconf database
                dconf update
        else
                echo -e " - GNOME Desktop Manager package is not installed on the system\n - Recommendation is not applicable"
        fi
}

Explanation: 
This audit is to verify GDM disabling automatic mounting of removable media is not overridden, disable automatic mounting is locked, since the evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.8.8 Ensure GDM autorun-never is enabled (Automated)

Evidence: 


 - Package: "gdm3" exists on the system
 - checking configuration

- Audit Result:
 ** FAIL **
 - Reason(s) for audit failure:

 - "autorun-never" is not set

Rationale: 
Malware on removable media may taking advantage of Autorun features when the media is inserted into a system and execute.

Remediation: 
Run the following script to set autorun-never to true for GDM users:

#!/usr/bin/env bash

{
        l_pkgoutput="" l_output="" l_output2=""
        l_gpname="local" # Set to desired dconf profile name (default is local)
        # Check if GNOME Desktop Manager is installed. If package isn't installed, recommendation is Not Applicable\n
        # determine system's package manager
        if command -v dpkg-query > /dev/null 2>&1; then
                l_pq="dpkg-query -W"
        elif command -v rpm > /dev/null 2>&1; then
                l_pq="rpm -q"
        fi
        # Check if GDM is installed
        l_pcl="gdm gdm3" # Space separated list of packages to check
        for l_pn in $l_pcl; do
                $l_pq "$l_pn" > /dev/null 2>&1 && l_pkgoutput="$l_pkgoutput\n - Package: \"$l_pn\" exists on the system\n - checking configuration"
        done
        echo -e "$l_pkgoutput"
        # Check configuration (If applicable)
        if [ -n "$l_pkgoutput" ]; then
                echo -e "$l_pkgoutput"
                # Look for existing settings and set variables if they exist
                l_kfile="$(grep -Prils -- ^h*autorun-neverb /etc/dconf/db/*.d)"
                # Set profile name based on dconf db directory ({PROFILE_NAME}.d)
                if [ -f "$l_kfile" ]; then
                        l_gpname="$(awk -F\/ '{split($(NF-1),a,".");print a[1]}' <<< "$l_kfile")"
                        echo " - updating dconf profile name to \"$l_gpname\""
                fi
                [ ! -f "$l_kfile" ] && l_kfile="/etc/dconf/db/$l_gpname.d/00-mediaautorun"
                # Check if profile file exists
                if grep -Pq -- "^\h*system-db:$l_gpname\b" /etc/dconf/profile/*; then
                        echo -e "\n - dconf database profile exists in: \"$(grep -Pl -- "^\h*system-db:$l_gpname\b" /etc/dconf/profile/*)\""
                else
                        [ ! -f "/etc/dconf/profile/user" ] && l_gpfile="/etc/dconf/profile/user" || l_gpfile="/etc/dconf/profile/user2"
                        echo -e " - creating dconf database profile"
                        {
                                echo -e "\nuser-db:user"
                                echo "system-db:$l_gpname"
                        } >> "$l_gpfile"
                fi
                # create dconf directory if it doesn't exists
                l_gpdir="/etc/dconf/db/$l_gpname.d"
                if [ -d "$l_gpdir" ]; then
                        echo " - The dconf database directory \"$l_gpdir\" exists"
                else
                        echo " - creating dconf database directory \"$l_gpdir\""
                        mkdir "$l_gpdir"
                fi
                # check autorun-never setting
                if grep -Pqs -- ^h*autorun-neverh*=h*trueb "$l_kfile"; then
                        echo " - \"autorun-never\" is set to true in: \"$l_kfile\""
                else
                        echo " - creating or updating \"autorun-never\" entry in \"$l_kfile\""
                        if grep -Psq -- ^h*autorun-never "$l_kfile"; then
                                sed -ri 's/(^\s*autorun-never\s*=\s*)(\S+)(\s*.*)$/\1true \3/' "$l_kfile"
                        else
                                ! grep -Psq -- ^h*[org/gnome/desktop/media-handling]b "$l_kfile" && echo [org/gnome/desktop/media-handling] >> "$l_kfile"
                                sed -ri /^s*[org/gnome/desktop/media-handling]/a\nautorun-never=true "$l_kfile"
                        fi
                fi
        else
                echo -e "\n - GNOME Desktop Manager package is not installed on the system\n - Recommendation is not applicable"
        fi
        # update dconf database
        dconf update
}

Explanation: 
This audit is to verify GDM autorun-never is enabled, autorun-never is set to true for GDM, since the evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.8.9 Ensure GDM autorun-never is not overridden (Automated)

Evidence: 


 - Package: "gdm3" exists on the system
 - checking configuration

- Audit Result:
 ** FAIL **
 - Reason(s) for audit failure:

 - "autorun-never" is not set, so it cannot be locked

Rationale: 
Malware on removable media may taking advantage of Autorun features when the media is inserted into a system and execute.

Remediation: 
Run the following script to ensure that autorun-never=true cannot be overridden:

#!/usr/bin/env bash

{
        # Check if GNOME Desktop Manager is installed. If package isn't installed, recommendation is Not Applicable\n
        # determine system's package manager
        l_pkgoutput=""
        if command -v dpkg-query > /dev/null 2>&1; then
                l_pq="dpkg-query -W"
        elif command -v rpm > /dev/null 2>&1; then
                l_pq="rpm -q"
        fi
        # Check if GDM is installed
        l_pcl="gdm gdm3" # Space separated list of packages to check
        for l_pn in $l_pcl; do
                $l_pq "$l_pn" > /dev/null 2>&1 && l_pkgoutput="y" && echo -e "\n - Package: \"$l_pn\" exists on the system\n - remediating configuration if needed"
        done
        # Check configuration (If applicable)
        if [ -n "$l_pkgoutput" ]; then
                # Look for autorun to determine profile in use, needed for remaining tests
                l_kfd="/etc/dconf/db/$(grep -Psril '^\h*autorun-never\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,".");print a[1]}' ).d" #set directory of key file to be locked
                if [ -d "$l_kfd" ]; then # If key file directory doesnt exist, options cant be locked
                        if grep -Priq ^h*/org/gnome/desktop/media-handling/autorunneverb "$l_kfd"; then
                                echo " - \"autorun-never\" is locked in \"$(grep -Pril ^h*/org/gnome/desktop/media-handling/autorun-neverb "$l_kfd")\""
                        else
                                echo " - creating entry to lock \"autorun-never\""
                                [ ! -d "$l_kfd"/locks ] && echo "creating directory $l_kfd/locks" && mkdir "$l_kfd"/locks
                                {
                                        echo -e '\n# Lock desktop media-handling autorun-never setting'
                                        echo '/org/gnome/desktop/media-handling/autorun-never'
                                } >> "$l_kfd"/locks/00-media-autorun
                        fi
                else
                        echo -e " - \"autorun-never\" is not set so it can not be locked\n - Please follow Recommendation \"Ensure GDM autorun-never is enabled\" and follow this Recommendation again"
                fi
                # update dconf database
                dconf update
        else
                echo -e " - GNOME Desktop Manager package is not installed on the system\n - Recommendation is not applicable"
        fi
}

Explanation: 
This audit is to verify GDM autorun-never is not overridden, since the evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.3.1 Ensure AIDE is installed (Automated)

Evidence: 
dpkg-query: no packages found matching aide
dpkg-query: no packages found matching aide-common

Rationale: 
By monitoring the filesystem state compromised files can be detected to prevent or limit the exposure of accidental or malicious misconfigurations or modified binaries.

Remediation: 
Run the following command to Install AIDE using the appropriate package manager or manual installation:
1. apt install aide aide-common
Configure AIDE as appropriate for your environment. Consult the AIDE documentation for options. Run the following commands to initialize AIDE:
2. aideinit
3. mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db

Explanation: 
This audit is to verify that AIDE is installed, since evidence displayed is unable to verify audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.3.2 Ensure filesystem integrity is regularly checked (Automated)

Evidence: 
Neither cron or aidecheck.service and aidecheck.timer is used to schedule and run aide check

Rationale: 
Periodic file checking allows the system administrator to determine on a regular basis if critical files have been changed in an unauthorized fashion.

Remediation: 
If cron will be used to schedule and run aide check:
Run the following command:
1. crontab -u root -e
add the following line to the crontab:
0 5 * * * /usr/bin/aide.wrapper --config /etc/aide/aide.conf --check

OR

If aidecheck.service and aidecheck.timer will be used to schedule and run aide check:
Create or edit the file /etc/systemd/system/aidecheck.service and add the following lines:
[Unit]
Description=Aide Check

[Service]
Type=simple
ExecStart=/usr/bin/aide.wrapper --config /etc/aide/aide.conf --check

[Install]
WantedBy=multi-user.target

Create or edit the file /etc/systemd/system/aidecheck.timer and add the following lines:
[Unit]
Description=Aide check every day at 5AM

[Timer]
OnCalendar=*-*-* 05:00:00
Unit=aidecheck.service

[Install]
WantedBy=multi-user.target

Run the following commands:
1. chown root:root /etc/systemd/system/aidecheck.*
2. chmod 0644 /etc/systemd/system/aidecheck.*
3. systemctl daemon-reload
4. systemctl enable aidecheck.service
5. systemctl --now enable aidecheck.timer

Explanation: 
This audit is to verify that filesystem intergrity is regularly checked, since evidence displayed is unable to verify audit, therefore compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.4.1 Ensure bootloader password is set (Automated)

Evidence: 
Desired output for audit, set superusers="<username>" and password_pbkdf2 <username> <encrypted-password>, not returned.

Rationale: 
Requiring a boot password upon execution of the boot loader will prevent an unauthorized user from entering boot parameters or changing the boot partition. This prevents users from weakening security (e.g. turning off AppArmor at boot time).

Remediation: 
Create an encrypted password with grub-mkpasswd-pbkdf2:
grub-mkpasswd-pbkdf2

Enter password: <password>
Reenter password: <password>
PBKDF2 hash of your password is <encrypted-password>

Add the following into a custom /etc/grub.d configuration file:
cat <<EOF
set superusers="<username>"
password_pbkdf2 <username> <encrypted-password>
EOF

The superuser/user information and password should not be contained in the /etc/grub.d/00_header file as this file could be overwritten in a package update. If there is a requirement to be able to boot/reboot without entering the password, edit /etc/grub.d/10_linux and add --unrestricted to the line CLASS=
Example:
CLASS="--class gnu-linux --class gnu --class os --unrestricted"

Run the following command to update the grub2 configuration:
update-grub

Explanation: 
This audit is to verify bootloader password is set, since evidence displayed did not return desired output, therefore compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.4.2 Ensure permissions on bootloader config are configured (Automated)

Evidence: 
Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)

Rationale: 
Setting the permissions to read and write for root only prevents non-root users from seeing the boot parameters or changing them. Non-root users who read the boot parameters may be able to identify weaknesses in security upon boot and be able to exploit them.

Remediation: 
Run the following commands to set permissions on your grub configuration:
1. chown root:root /boot/grub/grub.cfg
2. chmod u-wx,go-rwx /boot/grub/grub.cfg

Explanation: 
This audit is to verify that permissions on bootloader config are configured, both UID and GID are 0/root and Access is 0400 or more restrictive for the file /boot/grub/grub.cfg, since the evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.4.3 Ensure authentication required for single user mode (Automated)

Evidence: 
root is locked

Rationale: 
Requiring authentication in single user mode prevents an unauthorized user from rebooting the system into single user to gain root privileges without credentials.

Remediation: 
Run the following command and follow the prompts to set a password for the root user:
passwd root

Explanation: 
This audit is to verify that authentication required for single user mode, no results should be returned, since the evidence displayed returned root is locked, unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.5.1 Ensure address space layout randomization (ASLR) is enabled (Automated)

Evidence: 

Fail: "kernel.randomize_va_space = 2" is not set in a kernel parameter configuration file

Rationale: 
Randomly placing virtual memory regions will make it difficult to write memory page exploits as the memory placement will be consistently shifting.

Remediation: 
Set the following parameter in /etc/sysctl.conf or a /etc/sysctl.d/* file:
Example:
printf  kernel.randomize_va_space = 2  >> /etc/sysctl.d/60-kernel_sysctl.con

Run the following command to set the active kernel parameter:
sysctl -w kernel.randomize_va_space=2

Explanation: 
This audit is to verify that address space layout randomization (ASLR) is enabled, since evidence displayed is unable to verify audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.5.3 Ensure Automatic Error Reporting is not enabled (Automated)

Evidence: 
enabled=1
active

Rationale: 
Apport collects potentially sensitive data, such as core dumps, stack traces, and log files. They can contain passwords, credit card numbers, serial numbers, and other private material.

Remediation: 
Edit /etc/default/apport and add or edit the enabled parameter to equal 0:
enabled=0

Run the following commands to stop and disable the apport service:
1. systemctl stop apport.service
2. systemctl --now disable apport.service

OR

Run the following command to remove the apport package:
apt purge apport

Explanation: 
This audit is to verify that automatic error reporting is not enabled, since evidence is unable to verify audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.5.4 Ensure core dumps are restricted (Automated)

Evidence: 
1. '* hard core 0' not returned
2. fs.suid_dumpable = 2
3. 'fs.suid_dumpable = 0' not returned
4. Failed to get unit file state for coredump.service: No such file or directory

Rationale: 
Setting a hard limit on core dumps prevents users from overriding the soft variable. If core dumps are required, consider setting limits for user groups (see limits.conf(5) ). In addition, setting the fs.suid_dumpable variable to 0 will prevent setuid programs from dumping core.

Remediation: 
Add the following line to /etc/security/limits.conf or a /etc/security/limits.d/* file:
* hard core 0

Set the following parameter in /etc/sysctl.conf or a /etc/sysctl.d/* file:
fs.suid_dumpable = 0

Run the following command to set the active kernel parameter:
sysctl -w fs.suid_dumpable=0

IF systemd-coredump is installed:
edit /etc/systemd/coredump.conf and add/modify the following lines:
Storage=none
ProcessSizeMax=0

Run the command:
systemctl daemon-reload

Explanation: 
This audit is to verify that core dumps are restricted, since the evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.6.1.2 Ensure AppArmor is enabled in the bootloader configuration (Automated)

Evidence: 
1.
	linux	/vmlinuz-5.15.0-78-generic root=/dev/mapper/ubuntu--vg-ubuntu--lv ro  
		linux	/vmlinuz-5.15.0-78-generic root=/dev/mapper/ubuntu--vg-ubuntu--lv ro  
		linux	/vmlinuz-5.15.0-78-generic root=/dev/mapper/ubuntu--vg-ubuntu--lv ro recovery nomodeset dis_ucode_ldr 
		linux	/vmlinuz-5.15.0-76-generic root=/dev/mapper/ubuntu--vg-ubuntu--lv ro  
		linux	/vmlinuz-5.15.0-76-generic root=/dev/mapper/ubuntu--vg-ubuntu--lv ro recovery nomodeset dis_ucode_ldr 
	linux16	/memtest86+.bin console=ttyS0,115200n8
2.
	linux	/vmlinuz-5.15.0-78-generic root=/dev/mapper/ubuntu--vg-ubuntu--lv ro  
		linux	/vmlinuz-5.15.0-78-generic root=/dev/mapper/ubuntu--vg-ubuntu--lv ro  
		linux	/vmlinuz-5.15.0-78-generic root=/dev/mapper/ubuntu--vg-ubuntu--lv ro recovery nomodeset dis_ucode_ldr 
		linux	/vmlinuz-5.15.0-76-generic root=/dev/mapper/ubuntu--vg-ubuntu--lv ro  
		linux	/vmlinuz-5.15.0-76-generic root=/dev/mapper/ubuntu--vg-ubuntu--lv ro recovery nomodeset dis_ucode_ldr 
	linux16	/memtest86+.bin console=ttyS0,115200n8

Rationale: 
AppArmor must be enabled at boot time in your bootloader configuration to ensure that the controls it provides are not overridden.

Remediation: 
Edit /etc/default/grub and add the apparmor=1 and security=apparmor parameters to the GRUB_CMDLINE_LINUX= line:
GRUB_CMDLINE_LINUX="apparmor=1 security=apparmor"

Run the following command to update the grub2 configuration:
update-grub

Explanation: 
This audit is to verify that AppArmor is enabled in the bootloader configuration, no results should be returned, since evidence is unable to verify audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.6.1.4 Ensure all AppArmor Profiles are enforcing (Automated)

Evidence: 
1.
53 profiles are loaded.
50 profiles are in enforce mode.
3 profiles are in complain mode.
0 profiles are in kill mode.
0 profiles are in unconfined mode.
11 processes have profiles defined.
2.
11 processes have profiles defined.
11 processes are in enforce mode.
0 processes are in complain mode.
0 processes are unconfined but have a profile defined.
0 processes are in mixed mode.
0 processes are in kill mode.

Rationale: 
Security configuration requirements vary from site to site. Some sites may mandate a policy that is stricter than the default policy, which is perfectly acceptable. This item is intended to ensure that any policies that exist on the system are activated.

Remediation: 
Run the following command to set all profiles to enforce mode:
aa-enforce /etc/apparmor.d/*

Explanation: 
This audit is to verify that all AppArmor Profiles are enforcing, since the evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.8.1 Ensure GNOME Display Manager is removed (Automated)

Evidence: 
gdm3	install ok installed	installed

Rationale: 
If a Graphical User Interface (GUI) is not required, it should be removed to reduce the attack surface of the system.

Remediation: 
Run the following command to uninstall gdm3:
apt purge gdm3

Explanation: 
This audit is to verify that GNOME Display Manager is removed, gdm3 is not installed, since the evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.8.2 Ensure GDM login banner is configured (Automated)

Evidence: 

 - Package: "gdm3" exists on the system
 - checking configuration

- Audit Result:
 ** FAIL **
 - Reason(s) for audit failure:

 - The "banner-message-enable" option isn't configured

Rationale: 
Warning messages inform users who are attempting to login to the system of their legal status regarding the system and must include the name of the organization that owns the system and any monitoring policies that are in place.

Remediation: 
Run the following script:

#!/usr/bin/env bash
{
        l_pkgoutput=""
        if command -v dpkg-query > /dev/null 2>&1; then
                l_pq="dpkg-query -W"
        elif command -v rpm > /dev/null 2>&1; then
                l_pq="rpm -q"
        fi
        l_pcl="gdm gdm3" # Space separated list of packages to check
        for l_pn in $l_pcl; do
                $l_pq "$l_pn" > /dev/null 2>&1 && l_pkgoutput="$l_pkgoutput\n - Package: \"$l_pn\" exists on the system\n - checking configuration"
        done
        if [ -n "$l_pkgoutput" ]; then
                l_gdmprofile="gdm" # Set this to desired profile name IaW Local site policy
                l_bmessage="Authorized uses only. All activity may be monitored and reported" # Set to desired banner message
                if [ ! -f "/etc/dconf/profile/$l_gdmprofile" ]; then
                        echo "Creating profile \"$l_gdmprofile\""
                        echo -e "user-db:user\nsystem-db:$l_gdmprofile\nfile-db:/usr/share/$l_gdmprofile/greeter-dconf-defaults" > /etc/dconf/profile/$l_gdmprofile
                fi
                if [ ! -d "/etc/dconf/db/$l_gdmprofile.d/" ]; then
                        echo "Creating dconf database directory \"/etc/dconf/db/$l_gdmprofile.d/\""
                        mkdir /etc/dconf/db/$l_gdmprofile.d/
                fi
                if ! grep -Piq "^\h*banner-message-enable\h*=\h*true\b" /etc/dconf/db/$l_gdmprofile.d/*; then
                        echo "creating gdm keyfile for machine-wide settings"
                        if ! grep -Piq -- "^\h*banner-message-enable\h*=\h*" /etc/dconf/db/$l_gdmprofile.d/*; then
                                l_kfile="/etc/dconf/db/$l_gdmprofile.d/01-banner-message"
                                echo -e "\n[org/gnome/login-screen]\nbanner-message-enable=true" >> "$l_kfile"
                        else
                                l_kfile="$(grep -Pil -- "^\h*banner-message-enable\h*=\h*" /etc/dconf/db/$l_gdmprofile.d/*)"
                                ! grep -Pq "^\h*\[org\/gnome\/login-screen\]" "$l_kfile" && sed -ri "/^\s*banner-message-enable/ i\[org/gnome/login-screen]" "$l_kfile"
                                ! grep -Pq "^\h*banner-message-enable\h*=\h*true\b" "$l_kfile" && sed -ri "s/^\s*(banner-message-enable\s*=\s*)(\S+)(\s*.*$)/\1true \3//" "$l_kfile"
                                # sed -ri "/^\s*\[org\/gnome\/login-screen\]/ a\\nbanner-message-enable=true" "$l_kfile"
                        fi
                fi
                if ! grep -Piq "^\h*banner-message-text=[\'\"]+\S+" "$l_kfile"; then
                        sed -ri "/^\s*banner-message-enable/ a\banner-message-text=$l_bmessage" "$l_kfile"
                fi
                dconf update
        else
                echo -e "\n\n - GNOME Desktop Manager isnt installed\n - Recommendation is Not Applicable\n - No remediation required\n"
        fi
}

OR

Run the following command to remove the gdm3 package:
apt purge gdm3

Explanation: 
This audit is to verify GDM login banner is configured, text banner on the login screen is enabled and set, since the evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.8.3 Ensure GDM disable-user-list option is enabled (Automated)

Evidence: 

 - Package: "gdm3" exists on the system
 - checking configuration

- Audit Result:
 *** FAIL: ***

 - The "disable-user-list" option is not enabled

Rationale: 
Displaying the user list eliminates half of the Userid/Password equation that an unauthorized person would need to log on.

Remediation: 
Run the following script to enable the disable-user-list option:

#!/usr/bin/env bash

{
        l_gdmprofile="gdm"
        if [ ! -f "/etc/dconf/profile/$l_gdmprofile" ]; then
                echo "Creating profile \"$l_gdmprofile\""
                echo -e "user-db:user\nsystem-db:$l_gdmprofile\nfile-db:/usr/share/$l_gdmprofile/greeter-dconf-defaults" > /etc/dconf/profile/$l_gdmprofile
        fi
        if [ ! -d "/etc/dconf/db/$l_gdmprofile.d/" ]; then
                echo "Creating dconf database directory \"/etc/dconf/db/$l_gdmprofile.d/\""
                mkdir /etc/dconf/db/$l_gdmprofile.d/
        fi
        if ! grep -Piq ^h*disable-user-listh*=h*trueb /etc/dconf/db/$l_gdmprofile.d/*; then
                echo "creating gdm keyfile for machine-wide settings"
                if ! grep -Piq -- ^h*[org/gnome/login-screen] /etc/dconf/db/$l_gdmprofile.d/*; then
                        echo -e "\n[org/gnome/login-screen]\n# Do not show the user list\ndisable-user-list=true" >> /etc/dconf/db/$l_gdmprofile.d/00-login-screen
                else
                        sed -ri /^s*[org/gnome/login-screen]/ a# Do not show the user listndisable-user-list=true $(grep -Pil -- ^h*[org/gnome/login-screen] /etc/dconf/db/$l_gdmprofile.d/*)
                fi
        fi
        dconf update
}

OR

Run the following command to remove the GNOME package:
apt purge gdm3

Explanation: 
This audit it to verify GDM disable-user-list option is enabled, disable-user-list option is enabled or GNOME isn't installed, since the evidence displayed is unable to verify the audit, therefore the compliane is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.8.4 Ensure GDM screen locks when the user is idle (Automated)

Evidence: 


 - Package: "gdm3" exists on the system
 - checking configuration

- Audit Result:
 ** FAIL **
 - Reason(s) for audit failure:

 - The "idle-delay" option doesn't exist, remaining tests skipped

Rationale: 
Setting a lock-out value reduces the window of opportunity for unauthorized user access to another user's session that has been left unattended.

Remediation: 
Create or edit a file in the /etc/dconf/profile/ and verify it includes the following:
user-db:user
system-db:{NAME_OF_DCONF_DATABASE}
Note: local is the name of a dconf database used in the examples.
Example:
echo -e '\nuser-db:user\nsystem-db:local' >> /etc/dconf/profile/user
Create the directory /etc/dconf/db/{NAME_OF_DCONF_DATABASE}.d/ if it doesn't already exist:
Example:
mkdir /etc/dconf/db/local.d
Create the key file `/etc/dconf/db/{NAME_OF_DCONF_DATABASE}.d/{FILE_NAME} to provide information for the {NAME_OF_DCONF_DATABASE} database:
Example script:

#!/usr/bin/env bash

{
        l_key_file="/etc/dconf/db/local.d/00-screensaver"
        l_idmv="900" # Set max value for idle-delay in seconds (between 1 and 900)
        l_ldmv="5" # Set max value for lock-delay in seconds (between 0 and 5)
        {
                echo '# Specify the dconf path'
                echo '[org/gnome/desktop/session]'
                echo ''
                echo '# Number of seconds of inactivity before the screen goes blank'
                echo '# Set to 0 seconds if you want to deactivate the screensaver.'
                echo "idle-delay=uint32 $l_idmv"
                echo ''
                echo '# Specify the dconf path'
                echo '[org/gnome/desktop/screensaver]'
                echo ''
                echo '# Number of seconds after the screen is blank before locking the screen'
                echo "lock-delay=uint32 $l_ldmv"
        } > "$l_key_file"
}
Note: You must include the uint32 along with the integer key values as shown.

Run the following command to update the system databases:
dconf update
Note: Users must log out and back in again before the system-wide settings take effect.

Explanation: 
This audit is to verify that GDM screen locks when the user is idle, since the evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.8.5 Ensure GDM screen locks cannot be overridden (Automated)

Evidence: 


 - Package: "gdm3" exists on the system
 - checking configuration

- Audit Result:
 ** FAIL **
 - Reason(s) for audit failure:

 - "idle-delay" is not set so it can not be locked
 - "lock-delay" is not set so it can not be locked

Rationale: 
Setting a lock-out value reduces the window of opportunity for unauthorized user access to another user's session that has been left unattended.
Without locking down the system settings, user settings take precedence over the system settings.

Remediation: 
Run the following script to ensure screen locks can not be overridden:

#!/usr/bin/env bash

{
        # Check if GNMOE Desktop Manager is installed. If package isn't installed, recommendation is Not Applicable\n
        # determine system's package manager
        l_pkgoutput=""
        if command -v dpkg-query > /dev/null 2>&1; then
                l_pq="dpkg-query -W"
        elif command -v rpm > /dev/null 2>&1; then
                l_pq="rpm -q"
        fi
        # Check if GDM is installed
        l_pcl="gdm gdm3" # Space seporated list of packages to check
        for l_pn in $l_pcl; do
                $l_pq "$l_pn" > /dev/null 2>&1 && l_pkgoutput="y" && echo -e "\n -Package: \"$l_pn\" exists on the system\n - remediating configuration if needed"
        done
        # Check configuration (If applicable)
        if [ -n "$l_pkgoutput" ]; then
                # Look for idle-delay to determine profile in use, needed for remaining tests
                l_kfd="/etc/dconf/db/$(grep -Psril '^\h*idledelay\h*=\h*uint32\h+\d+\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,".");print a[1]}' ).d" #set directory of key file to be locked
                # Look for lock-delay to determine profile in use, needed for remaining tests
                l_kfd2="/etc/dconf/db/$(grep -Psril '^\h*lockdelay\h*=\h*uint32\h+\d+\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,".");print a[1]}' ).d" #set directory of key file to be locked
                if [ -d "$l_kfd" ]; then # If key file directory doesnt exist, options cant be locked
                        if grep -Prilq ^h*/org/gnome/desktop/session/idle-delayb "$l_kfd"; then
                                echo " - \"idle-delay\" is locked in \"$(grep -Pril ^h*/org/gnome/desktop/session/idle-delayb "$l_kfd")\""
                        else
                                echo "creating entry to lock \"idle-delay\""
                                [ ! -d "$l_kfd"/locks ] && echo "creating directory $l_kfd/locks" && mkdir "$l_kfd"/locks
                                {
                                        echo -e '\n# Lock desktop screensaver idle-delay setting'
                                        echo '/org/gnome/desktop/session/idle-delay'
                                } >> "$l_kfd"/locks/00-screensaver
                        fi
                else
                        echo -e " - \"idle-delay\" is not set so it can not be locked\n - Please follow Recommendation \"Ensure GDM screen locks when the user is idle\" and follow this Recommendation again"
                fi
                if [ -d "$l_kfd2" ]; then # If key file directory doesnt exist, options cant be locked
                        if grep -Prilq ^h*/org/gnome/desktop/screensaver/lockdelayb "$l_kfd2"; then
                                echo " - \"lock-delay\" is locked in \"$(grep -Pril ^h*/org/gnome/desktop/screensaver/lock-delayb "$l_kfd2")\""
                        else
                                echo "creating entry to lock \"lock-delay\""
                                [ ! -d "$l_kfd2"/locks ] && echo "creating directory $l_kfd2/locks" && mkdir "$l_kfd2"/locks
                                {
                                        echo -e '\n# Lock desktop screensaver lock-delay setting'
                                        echo '/org/gnome/desktop/screensaver/lock-delay'
                                } >> "$l_kfd2"/locks/00-screensaver
                        fi
                else
                        echo -e " - \"lock-delay\" is not set so it can not be locked\n - Please follow Recommendation \"Ensure GDM screen locks when the user is idle\" and follow this Recommendation again"
                fi
        else
                echo -e " - GNOME Desktop Manager package is not installed on the system\n - Recommendation is not applicable"
        fi
}

Run the following command to update the system databases:
dconf update
Note: Users must log out and back in again before the system-wide settings take effect.

Explanation: 
This audit is to verify GDM screen locks cannot be overridden, since evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.8.6 Ensure GDM automatic mounting of removable media is disabled (Automated)

Evidence: 

 - Package: "gdm3" exists on the system
 - checking configuration

- Audit Result:
 ** FAIL **
 - Reason(s) for audit failure:

 - neither "automount" or "automount-open" is set

Rationale: 
With automounting enabled anyone with physical access could attach a USB drive or disc and have its contents available in system even if they lacked permissions to mount it themselves.

Remediation: 
Run the following script to disable automatic mounting of media for all GNOME users:

#!/usr/bin/env bash

{
        l_pkgoutput="" l_output="" l_output2=""
        l_gpbame="local" # Set to desired dconf profile name (defaule is local)
        # Check if GNOME Desktop Manager is installed. If package isn't installed, recommendation is Not Applicable\n
        # determine system's package manager
        if command -v dpkg-query > /dev/null 2>&1; then
                l_pq="dpkg-query -W"
        elif command -v rpm > /dev/null 2>&1; then
                l_pq="rpm -q"
        fi
        # Check if GDM is installed
        l_pcl="gdm gdm3" # Space seporated list of packages to check
        for l_pn in $l_pcl; do
                $l_pq "$l_pn" > /dev/null 2>&1 && l_pkgoutput="$l_pkgoutput\n - Package: \"$l_pn\" exists on the system\n - checking configuration"
        done
        echo -e "$l_packageout"
        # Check configuration (If applicable)
        if [ -n "$l_pkgoutput" ]; then
                echo -e "$l_pkgoutput"
                # Look for existing settings and set variables if they exist
                l_kfile="$(grep -Prils -- ^h*automountb /etc/dconf/db/*.d)"
                l_kfile2="$(grep -Prils -- ^h*automount-openb /etc/dconf/db/*.d)"
                # Set profile name based on dconf db directory ({PROFILE_NAME}.d)
                if [ -f "$l_kfile" ]; then
                        l_gpname="$(awk -F\/ '{split($(NF-1),a,".");print a[1]}' <<< "$l_kfile")"
                        echo " - updating dconf profile name to \"$l_gpname\""
                elif [ -f "$l_kfile2" ]; then
                        l_gpname="$(awk -F\/ '{split($(NF-1),a,".");print a[1]}' <<< "$l_kfile2")"
                        echo " - updating dconf profile name to \"$l_gpname\""
                fi
                # check for consistency (Clean up configuration if needed)
                if [ -f "$l_kfile" ] && [ "$(awk -F\/ '{split($(NF-1),a,".");print a[1]}' <<< "$l_kfile")" != "$l_gpname" ]; then
                        sed -ri "/^\s*automount\s*=/s/^/# /" "$l_kfile"
                        l_kfile="/etc/dconf/db/$l_gpname.d/00-media-automount"
                fi
                if [ -f "$l_kfile2" ] && [ "$(awk -F\/ '{split($(NF-1),a,".");print a[1]}' <<< "$l_kfile2")" != "$l_gpname" ]; then
                        sed -ri "/^\s*automount-open\s*=/s/^/# /" "$l_kfile2"
                fi
                [ -n "$l_kfile" ] && l_kfile="/etc/dconf/db/$l_gpname.d/00-media-automount"
                # Check if profile file exists
                if grep -Pq -- "^\h*system-db:$l_gpname\b" /etc/dconf/profile/*; then
                        echo -e "\n - dconf database profile exists in: \"$(grep -Pl -- "^\h*system-db:$l_gpname\b" /etc/dconf/profile/*)\""
                else
                        [ ! -f "/etc/dconf/profile/user" ] && l_gpfile="/etc/dconf/profile/user" || l_gpfile="/etc/dconf/profile/user2"
                        echo -e " - creating dconf database profile"
                        {
                                echo -e "\nuser-db:user"
                                echo "system-db:$l_gpname"
                        } >> "$l_gpfile"
                fi
                # create dconf directory if it doesn't exists
                l_gpdir="/etc/dconf/db/$l_gpname.d"
                if [ -d "$l_gpdir" ]; then
                        echo " - The dconf database directory \"$l_gpdir\" exists"
                else
                        echo " - creating dconf database directory \"$l_gpdir\""
                        mkdir "$l_gpdir"
                fi
                # check automount-open setting
                if grep -Pqs -- ^h*automount-openh*=h*falseb "$l_kfile"; then
                        echo " - \"automount-open\" is set to false in: \"$l_kfile\""
                else
                        echo " - creating \"automount-open\" entry in \"$l_kfile\""
                        ! grep -Psq -- ^h*[org/gnome/desktop/media-handling]b "$l_kfile" && echo [org/gnome/desktop/media-handling] >> "$l_kfile"
                        sed -ri '/^\s*\[org\/gnome\/desktop\/media-handling\]/a\nautomount-open=false'
                fi
                # check automount setting
                if grep -Pqs -- ^h*automounth*=h*falseb "$l_kfile"; then
                        echo " - \"automount\" is set to false in: \"$l_kfile\""
                else
                        echo " - creating \"automount\" entry in \"$l_kfile\""
                        ! grep -Psq -- ^h*[org/gnome/desktop/media-handling]b "$l_kfile" && echo [org/gnome/desktop/media-handling] >> "$l_kfile"
                        sed -ri '/^\s*\[org\/gnome\/desktop\/media-handling\]/a\nautomount=false'
                fi
        else
                echo -e "\n - GNOME Desktop Manager package is not installed on the system\n - Recommendation is not applicable"
        fi
        # update dconf database
        dconf update
}

OR

Run the following command to uninstall the GNOME desktop Manager package:
apt purge gdm3

Explanation: 
This audit is to verify GDM automatic mounting of removable media is disabled, since the evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.8.7 Ensure GDM disabling automatic mounting of removable media is not overridden (Automated)

Evidence: 


 - Package: "gdm3" exists on the system
 - checking configuration

- Audit Result:
 ** FAIL **
 - Reason(s) for audit failure:

 - "automount" is not set, so it cannot be locked
 - "automount-open" is not set, so it cannot be locked

Rationale: 
With automounting enabled anyone with physical access could attach a USB drive or disc and have its contents available in system even if they lacked permissions to mount it themselves.

Remediation: 
Run the following script to lock disable automatic mounting of media for all GNOME users:

#!/usr/bin/env bash

{
        # Check if GNMOE Desktop Manager is installed. If package isn't installed, recommendation is Not Applicable\n
        # determine system's package manager
        l_pkgoutput=""
        if command -v dpkg-query > /dev/null 2>&1; then
                l_pq="dpkg-query -W"
        elif command -v rpm > /dev/null 2>&1; then
                l_pq="rpm -q"
        fi
        # Check if GDM is installed
        l_pcl="gdm gdm3" # Space seporated list of packages to check
        for l_pn in $l_pcl; do
                $l_pq "$l_pn" > /dev/null 2>&1 && l_pkgoutput="y" && echo -e "\n - Package: \"$l_pn\" exists on the system\n - remediating configuration if needed"
        done
        # Check configuration (If applicable)
        if [ -n "$l_pkgoutput" ]; then
                # Look for automount to determine profile in use, needed for remaining tests
                l_kfd="/etc/dconf/db/$(grep -Psril '^\h*automount\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,".");print a[1]}' ).d" #set directory of key file to be locked
                # Look for automount-open to determine profile in use, needed for remaining tests
                l_kfd2="/etc/dconf/db/$(grep -Psril '^\h*automount-open\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,".");print a[1]}' ).d" #set directory of key file to be locked
                if [ -d "$l_kfd" ]; then # If key file directory doesnt exist, options cant be locked
                        if grep -Priq ^h*/org/gnome/desktop/mediahandling/automountb "$l_kfd"; then
                                echo " - \"automount\" is locked in \"$(grep -Pril ^h*/org/gnome/desktop/media-handling/automountb "$l_kfd")\""
                        else
                                echo " - creating entry to lock \"automount\""
                                [ ! -d "$l_kfd"/locks ] && echo "creating directory $l_kfd/locks" && mkdir "$l_kfd"/locks
                                {
                                        echo -e '\n# Lock desktop media-handling automount setting'
                                        echo '/org/gnome/desktop/media-handling/automount'
                                } >> "$l_kfd"/locks/00-media-automount
                        fi
                else
                        echo -e " - \"automount\" is not set so it can not be locked\n - Please follow Recommendation \"Ensure GDM automatic mounting of removable media is disabled\" and follow this Recommendation again"
                fi
                if [ -d "$l_kfd2" ]; then # If key file directory doesnt exist, options cant be locked
                        if grep -Priq ^h*/org/gnome/desktop/media-handling/automountopenb "$l_kfd2"; then
                                echo " - \"automount-open\" is locked in \"$(grep -Pril ^h*/org/gnome/desktop/media-handling/automount-openb "$l_kfd2")\""
                        else
                                echo " - creating entry to lock \"automount-open\""
                                [ ! -d "$l_kfd2"/locks ] && echo "creating directory $l_kfd2/locks" && mkdir "$l_kfd2"/locks
                                {
                                        echo -e '\n# Lock desktop media-handling automount-open setting'
                                        echo '/org/gnome/desktop/media-handling/automount-open'
                                } >> "$l_kfd2"/locks/00-media-automount
                        fi
                else
                        echo -e " - \"automount-open\" is not set so it can not be locked\n - Please follow Recommendation \"Ensure GDM automatic mounting of removable media is disabled\" and follow this Recommendation again"
                fi
                # update dconf database
                dconf update
        else
                echo -e " - GNOME Desktop Manager package is not installed on the system\n - Recommendation is not applicable"
        fi
}

Explanation: 
This audit is to verify GDM disabling automatic mounting of removable media is not overridden, disable automatic mounting is locked, since the evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.8.8 Ensure GDM autorun-never is enabled (Automated)

Evidence: 


 - Package: "gdm3" exists on the system
 - checking configuration

- Audit Result:
 ** FAIL **
 - Reason(s) for audit failure:

 - "autorun-never" is not set

Rationale: 
Malware on removable media may taking advantage of Autorun features when the media is inserted into a system and execute.

Remediation: 
Run the following script to set autorun-never to true for GDM users:

#!/usr/bin/env bash

{
        l_pkgoutput="" l_output="" l_output2=""
        l_gpname="local" # Set to desired dconf profile name (default is local)
        # Check if GNOME Desktop Manager is installed. If package isn't installed, recommendation is Not Applicable\n
        # determine system's package manager
        if command -v dpkg-query > /dev/null 2>&1; then
                l_pq="dpkg-query -W"
        elif command -v rpm > /dev/null 2>&1; then
                l_pq="rpm -q"
        fi
        # Check if GDM is installed
        l_pcl="gdm gdm3" # Space separated list of packages to check
        for l_pn in $l_pcl; do
                $l_pq "$l_pn" > /dev/null 2>&1 && l_pkgoutput="$l_pkgoutput\n - Package: \"$l_pn\" exists on the system\n - checking configuration"
        done
        echo -e "$l_pkgoutput"
        # Check configuration (If applicable)
        if [ -n "$l_pkgoutput" ]; then
                echo -e "$l_pkgoutput"
                # Look for existing settings and set variables if they exist
                l_kfile="$(grep -Prils -- ^h*autorun-neverb /etc/dconf/db/*.d)"
                # Set profile name based on dconf db directory ({PROFILE_NAME}.d)
                if [ -f "$l_kfile" ]; then
                        l_gpname="$(awk -F\/ '{split($(NF-1),a,".");print a[1]}' <<< "$l_kfile")"
                        echo " - updating dconf profile name to \"$l_gpname\""
                fi
                [ ! -f "$l_kfile" ] && l_kfile="/etc/dconf/db/$l_gpname.d/00-mediaautorun"
                # Check if profile file exists
                if grep -Pq -- "^\h*system-db:$l_gpname\b" /etc/dconf/profile/*; then
                        echo -e "\n - dconf database profile exists in: \"$(grep -Pl -- "^\h*system-db:$l_gpname\b" /etc/dconf/profile/*)\""
                else
                        [ ! -f "/etc/dconf/profile/user" ] && l_gpfile="/etc/dconf/profile/user" || l_gpfile="/etc/dconf/profile/user2"
                        echo -e " - creating dconf database profile"
                        {
                                echo -e "\nuser-db:user"
                                echo "system-db:$l_gpname"
                        } >> "$l_gpfile"
                fi
                # create dconf directory if it doesn't exists
                l_gpdir="/etc/dconf/db/$l_gpname.d"
                if [ -d "$l_gpdir" ]; then
                        echo " - The dconf database directory \"$l_gpdir\" exists"
                else
                        echo " - creating dconf database directory \"$l_gpdir\""
                        mkdir "$l_gpdir"
                fi
                # check autorun-never setting
                if grep -Pqs -- ^h*autorun-neverh*=h*trueb "$l_kfile"; then
                        echo " - \"autorun-never\" is set to true in: \"$l_kfile\""
                else
                        echo " - creating or updating \"autorun-never\" entry in \"$l_kfile\""
                        if grep -Psq -- ^h*autorun-never "$l_kfile"; then
                                sed -ri 's/(^\s*autorun-never\s*=\s*)(\S+)(\s*.*)$/\1true \3/' "$l_kfile"
                        else
                                ! grep -Psq -- ^h*[org/gnome/desktop/media-handling]b "$l_kfile" && echo [org/gnome/desktop/media-handling] >> "$l_kfile"
                                sed -ri /^s*[org/gnome/desktop/media-handling]/a\nautorun-never=true "$l_kfile"
                        fi
                fi
        else
                echo -e "\n - GNOME Desktop Manager package is not installed on the system\n - Recommendation is not applicable"
        fi
        # update dconf database
        dconf update
}

Explanation: 
This audit is to verify GDM autorun-never is enabled, autorun-never is set to true for GDM, since the evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.8.9 Ensure GDM autorun-never is not overridden (Automated)

Evidence: 


 - Package: "gdm3" exists on the system
 - checking configuration

- Audit Result:
 ** FAIL **
 - Reason(s) for audit failure:

 - "autorun-never" is not set, so it cannot be locked

Rationale: 
Malware on removable media may taking advantage of Autorun features when the media is inserted into a system and execute.

Remediation: 
Run the following script to ensure that autorun-never=true cannot be overridden:

#!/usr/bin/env bash

{
        # Check if GNOME Desktop Manager is installed. If package isn't installed, recommendation is Not Applicable\n
        # determine system's package manager
        l_pkgoutput=""
        if command -v dpkg-query > /dev/null 2>&1; then
                l_pq="dpkg-query -W"
        elif command -v rpm > /dev/null 2>&1; then
                l_pq="rpm -q"
        fi
        # Check if GDM is installed
        l_pcl="gdm gdm3" # Space separated list of packages to check
        for l_pn in $l_pcl; do
                $l_pq "$l_pn" > /dev/null 2>&1 && l_pkgoutput="y" && echo -e "\n - Package: \"$l_pn\" exists on the system\n - remediating configuration if needed"
        done
        # Check configuration (If applicable)
        if [ -n "$l_pkgoutput" ]; then
                # Look for autorun to determine profile in use, needed for remaining tests
                l_kfd="/etc/dconf/db/$(grep -Psril '^\h*autorun-never\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,".");print a[1]}' ).d" #set directory of key file to be locked
                if [ -d "$l_kfd" ]; then # If key file directory doesnt exist, options cant be locked
                        if grep -Priq ^h*/org/gnome/desktop/media-handling/autorunneverb "$l_kfd"; then
                                echo " - \"autorun-never\" is locked in \"$(grep -Pril ^h*/org/gnome/desktop/media-handling/autorun-neverb "$l_kfd")\""
                        else
                                echo " - creating entry to lock \"autorun-never\""
                                [ ! -d "$l_kfd"/locks ] && echo "creating directory $l_kfd/locks" && mkdir "$l_kfd"/locks
                                {
                                        echo -e '\n# Lock desktop media-handling autorun-never setting'
                                        echo '/org/gnome/desktop/media-handling/autorun-never'
                                } >> "$l_kfd"/locks/00-media-autorun
                        fi
                else
                        echo -e " - \"autorun-never\" is not set so it can not be locked\n - Please follow Recommendation \"Ensure GDM autorun-never is enabled\" and follow this Recommendation again"
                fi
                # update dconf database
                dconf update
        else
                echo -e " - GNOME Desktop Manager package is not installed on the system\n - Recommendation is not applicable"
        fi
}

Explanation: 
This audit is to verify GDM autorun-never is not overridden, since the evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.3.1 Ensure AIDE is installed (Automated)

Evidence: 
dpkg-query: no packages found matching aide
dpkg-query: no packages found matching aide-common

Rationale: 
By monitoring the filesystem state compromised files can be detected to prevent or limit the exposure of accidental or malicious misconfigurations or modified binaries.

Remediation: 
Run the following command to Install AIDE using the appropriate package manager or manual installation:
1. apt install aide aide-common
Configure AIDE as appropriate for your environment. Consult the AIDE documentation for options. Run the following commands to initialize AIDE:
2. aideinit
3. mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db

Explanation: 
This audit is to verify that AIDE is installed, since evidence displayed is unable to verify audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.3.2 Ensure filesystem integrity is regularly checked (Automated)

Evidence: 
Neither cron or aidecheck.service and aidecheck.timer is used to schedule and run aide check

Rationale: 
Periodic file checking allows the system administrator to determine on a regular basis if critical files have been changed in an unauthorized fashion.

Remediation: 
If cron will be used to schedule and run aide check:
Run the following command:
1. crontab -u root -e
add the following line to the crontab:
0 5 * * * /usr/bin/aide.wrapper --config /etc/aide/aide.conf --check

OR

If aidecheck.service and aidecheck.timer will be used to schedule and run aide check:
Create or edit the file /etc/systemd/system/aidecheck.service and add the following lines:
[Unit]
Description=Aide Check

[Service]
Type=simple
ExecStart=/usr/bin/aide.wrapper --config /etc/aide/aide.conf --check

[Install]
WantedBy=multi-user.target

Create or edit the file /etc/systemd/system/aidecheck.timer and add the following lines:
[Unit]
Description=Aide check every day at 5AM

[Timer]
OnCalendar=*-*-* 05:00:00
Unit=aidecheck.service

[Install]
WantedBy=multi-user.target

Run the following commands:
1. chown root:root /etc/systemd/system/aidecheck.*
2. chmod 0644 /etc/systemd/system/aidecheck.*
3. systemctl daemon-reload
4. systemctl enable aidecheck.service
5. systemctl --now enable aidecheck.timer

Explanation: 
This audit is to verify that filesystem intergrity is regularly checked, since evidence displayed is unable to verify audit, therefore compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.4.1 Ensure bootloader password is set (Automated)

Evidence: 
Desired output for audit, set superusers="<username>" and password_pbkdf2 <username> <encrypted-password>, not returned.

Rationale: 
Requiring a boot password upon execution of the boot loader will prevent an unauthorized user from entering boot parameters or changing the boot partition. This prevents users from weakening security (e.g. turning off AppArmor at boot time).

Remediation: 
Create an encrypted password with grub-mkpasswd-pbkdf2:
grub-mkpasswd-pbkdf2

Enter password: <password>
Reenter password: <password>
PBKDF2 hash of your password is <encrypted-password>

Add the following into a custom /etc/grub.d configuration file:
cat <<EOF
set superusers="<username>"
password_pbkdf2 <username> <encrypted-password>
EOF

The superuser/user information and password should not be contained in the /etc/grub.d/00_header file as this file could be overwritten in a package update. If there is a requirement to be able to boot/reboot without entering the password, edit /etc/grub.d/10_linux and add --unrestricted to the line CLASS=
Example:
CLASS="--class gnu-linux --class gnu --class os --unrestricted"

Run the following command to update the grub2 configuration:
update-grub

Explanation: 
This audit is to verify bootloader password is set, since evidence displayed did not return desired output, therefore compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.4.2 Ensure permissions on bootloader config are configured (Automated)

Evidence: 
Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)

Rationale: 
Setting the permissions to read and write for root only prevents non-root users from seeing the boot parameters or changing them. Non-root users who read the boot parameters may be able to identify weaknesses in security upon boot and be able to exploit them.

Remediation: 
Run the following commands to set permissions on your grub configuration:
1. chown root:root /boot/grub/grub.cfg
2. chmod u-wx,go-rwx /boot/grub/grub.cfg

Explanation: 
This audit is to verify that permissions on bootloader config are configured, both UID and GID are 0/root and Access is 0400 or more restrictive for the file /boot/grub/grub.cfg, since the evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.4.3 Ensure authentication required for single user mode (Automated)

Evidence: 
root is locked

Rationale: 
Requiring authentication in single user mode prevents an unauthorized user from rebooting the system into single user to gain root privileges without credentials.

Remediation: 
Run the following command and follow the prompts to set a password for the root user:
passwd root

Explanation: 
This audit is to verify that authentication required for single user mode, no results should be returned, since the evidence displayed returned root is locked, unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.5.1 Ensure address space layout randomization (ASLR) is enabled (Automated)

Evidence: 

Fail: "kernel.randomize_va_space = 2" is not set in a kernel parameter configuration file

Rationale: 
Randomly placing virtual memory regions will make it difficult to write memory page exploits as the memory placement will be consistently shifting.

Remediation: 
Set the following parameter in /etc/sysctl.conf or a /etc/sysctl.d/* file:
Example:
printf  kernel.randomize_va_space = 2  >> /etc/sysctl.d/60-kernel_sysctl.con

Run the following command to set the active kernel parameter:
sysctl -w kernel.randomize_va_space=2

Explanation: 
This audit is to verify that address space layout randomization (ASLR) is enabled, since evidence displayed is unable to verify audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.5.3 Ensure Automatic Error Reporting is not enabled (Automated)

Evidence: 
enabled=1
active

Rationale: 
Apport collects potentially sensitive data, such as core dumps, stack traces, and log files. They can contain passwords, credit card numbers, serial numbers, and other private material.

Remediation: 
Edit /etc/default/apport and add or edit the enabled parameter to equal 0:
enabled=0

Run the following commands to stop and disable the apport service:
1. systemctl stop apport.service
2. systemctl --now disable apport.service

OR

Run the following command to remove the apport package:
apt purge apport

Explanation: 
This audit is to verify that automatic error reporting is not enabled, since evidence is unable to verify audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.5.4 Ensure core dumps are restricted (Automated)

Evidence: 
1. '* hard core 0' not returned
2. fs.suid_dumpable = 2
3. 'fs.suid_dumpable = 0' not returned
4. Failed to get unit file state for coredump.service: No such file or directory

Rationale: 
Setting a hard limit on core dumps prevents users from overriding the soft variable. If core dumps are required, consider setting limits for user groups (see limits.conf(5) ). In addition, setting the fs.suid_dumpable variable to 0 will prevent setuid programs from dumping core.

Remediation: 
Add the following line to /etc/security/limits.conf or a /etc/security/limits.d/* file:
* hard core 0

Set the following parameter in /etc/sysctl.conf or a /etc/sysctl.d/* file:
fs.suid_dumpable = 0

Run the following command to set the active kernel parameter:
sysctl -w fs.suid_dumpable=0

IF systemd-coredump is installed:
edit /etc/systemd/coredump.conf and add/modify the following lines:
Storage=none
ProcessSizeMax=0

Run the command:
systemctl daemon-reload

Explanation: 
This audit is to verify that core dumps are restricted, since the evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.6.1.2 Ensure AppArmor is enabled in the bootloader configuration (Automated)

Evidence: 
1.
	linux	/vmlinuz-5.15.0-75-generic root=/dev/mapper/ubuntu--vg-ubuntu--lv ro  
		linux	/vmlinuz-5.15.0-75-generic root=/dev/mapper/ubuntu--vg-ubuntu--lv ro  
		linux	/vmlinuz-5.15.0-75-generic root=/dev/mapper/ubuntu--vg-ubuntu--lv ro recovery nomodeset dis_ucode_ldr 
	linux16	/memtest86+.bin console=ttyS0,115200n8
2.
	linux	/vmlinuz-5.15.0-75-generic root=/dev/mapper/ubuntu--vg-ubuntu--lv ro  
		linux	/vmlinuz-5.15.0-75-generic root=/dev/mapper/ubuntu--vg-ubuntu--lv ro  
		linux	/vmlinuz-5.15.0-75-generic root=/dev/mapper/ubuntu--vg-ubuntu--lv ro recovery nomodeset dis_ucode_ldr 
	linux16	/memtest86+.bin console=ttyS0,115200n8

Rationale: 
AppArmor must be enabled at boot time in your bootloader configuration to ensure that the controls it provides are not overridden.

Remediation: 
Edit /etc/default/grub and add the apparmor=1 and security=apparmor parameters to the GRUB_CMDLINE_LINUX= line:
GRUB_CMDLINE_LINUX="apparmor=1 security=apparmor"

Run the following command to update the grub2 configuration:
update-grub

Explanation: 
This audit is to verify that AppArmor is enabled in the bootloader configuration, no results should be returned, since evidence is unable to verify audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.6.1.4 Ensure all AppArmor Profiles are enforcing (Automated)

Evidence: 
1.
53 profiles are loaded.
50 profiles are in enforce mode.
3 profiles are in complain mode.
0 profiles are in kill mode.
0 profiles are in unconfined mode.
11 processes have profiles defined.
2.
11 processes have profiles defined.
11 processes are in enforce mode.
0 processes are in complain mode.
0 processes are unconfined but have a profile defined.
0 processes are in mixed mode.
0 processes are in kill mode.

Rationale: 
Security configuration requirements vary from site to site. Some sites may mandate a policy that is stricter than the default policy, which is perfectly acceptable. This item is intended to ensure that any policies that exist on the system are activated.

Remediation: 
Run the following command to set all profiles to enforce mode:
aa-enforce /etc/apparmor.d/*

Explanation: 
This audit is to verify that all AppArmor Profiles are enforcing, since the evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.8.1 Ensure GNOME Display Manager is removed (Automated)

Evidence: 
gdm3	install ok installed	installed

Rationale: 
If a Graphical User Interface (GUI) is not required, it should be removed to reduce the attack surface of the system.

Remediation: 
Run the following command to uninstall gdm3:
apt purge gdm3

Explanation: 
This audit is to verify that GNOME Display Manager is removed, gdm3 is not installed, since the evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.8.2 Ensure GDM login banner is configured (Automated)

Evidence: 

 - Package: "gdm3" exists on the system
 - checking configuration

- Audit Result:
 ** FAIL **
 - Reason(s) for audit failure:

 - The "banner-message-enable" option isn't configured

Rationale: 
Warning messages inform users who are attempting to login to the system of their legal status regarding the system and must include the name of the organization that owns the system and any monitoring policies that are in place.

Remediation: 
Run the following script:

#!/usr/bin/env bash
{
        l_pkgoutput=""
        if command -v dpkg-query > /dev/null 2>&1; then
                l_pq="dpkg-query -W"
        elif command -v rpm > /dev/null 2>&1; then
                l_pq="rpm -q"
        fi
        l_pcl="gdm gdm3" # Space separated list of packages to check
        for l_pn in $l_pcl; do
                $l_pq "$l_pn" > /dev/null 2>&1 && l_pkgoutput="$l_pkgoutput\n - Package: \"$l_pn\" exists on the system\n - checking configuration"
        done
        if [ -n "$l_pkgoutput" ]; then
                l_gdmprofile="gdm" # Set this to desired profile name IaW Local site policy
                l_bmessage="Authorized uses only. All activity may be monitored and reported" # Set to desired banner message
                if [ ! -f "/etc/dconf/profile/$l_gdmprofile" ]; then
                        echo "Creating profile \"$l_gdmprofile\""
                        echo -e "user-db:user\nsystem-db:$l_gdmprofile\nfile-db:/usr/share/$l_gdmprofile/greeter-dconf-defaults" > /etc/dconf/profile/$l_gdmprofile
                fi
                if [ ! -d "/etc/dconf/db/$l_gdmprofile.d/" ]; then
                        echo "Creating dconf database directory \"/etc/dconf/db/$l_gdmprofile.d/\""
                        mkdir /etc/dconf/db/$l_gdmprofile.d/
                fi
                if ! grep -Piq "^\h*banner-message-enable\h*=\h*true\b" /etc/dconf/db/$l_gdmprofile.d/*; then
                        echo "creating gdm keyfile for machine-wide settings"
                        if ! grep -Piq -- "^\h*banner-message-enable\h*=\h*" /etc/dconf/db/$l_gdmprofile.d/*; then
                                l_kfile="/etc/dconf/db/$l_gdmprofile.d/01-banner-message"
                                echo -e "\n[org/gnome/login-screen]\nbanner-message-enable=true" >> "$l_kfile"
                        else
                                l_kfile="$(grep -Pil -- "^\h*banner-message-enable\h*=\h*" /etc/dconf/db/$l_gdmprofile.d/*)"
                                ! grep -Pq "^\h*\[org\/gnome\/login-screen\]" "$l_kfile" && sed -ri "/^\s*banner-message-enable/ i\[org/gnome/login-screen]" "$l_kfile"
                                ! grep -Pq "^\h*banner-message-enable\h*=\h*true\b" "$l_kfile" && sed -ri "s/^\s*(banner-message-enable\s*=\s*)(\S+)(\s*.*$)/\1true \3//" "$l_kfile"
                                # sed -ri "/^\s*\[org\/gnome\/login-screen\]/ a\\nbanner-message-enable=true" "$l_kfile"
                        fi
                fi
                if ! grep -Piq "^\h*banner-message-text=[\'\"]+\S+" "$l_kfile"; then
                        sed -ri "/^\s*banner-message-enable/ a\banner-message-text=$l_bmessage" "$l_kfile"
                fi
                dconf update
        else
                echo -e "\n\n - GNOME Desktop Manager isnt installed\n - Recommendation is Not Applicable\n - No remediation required\n"
        fi
}

OR

Run the following command to remove the gdm3 package:
apt purge gdm3

Explanation: 
This audit is to verify GDM login banner is configured, text banner on the login screen is enabled and set, since the evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.8.3 Ensure GDM disable-user-list option is enabled (Automated)

Evidence: 

 - Package: "gdm3" exists on the system
 - checking configuration

- Audit Result:
 *** FAIL: ***

 - The "disable-user-list" option is not enabled

Rationale: 
Displaying the user list eliminates half of the Userid/Password equation that an unauthorized person would need to log on.

Remediation: 
Run the following script to enable the disable-user-list option:

#!/usr/bin/env bash

{
        l_gdmprofile="gdm"
        if [ ! -f "/etc/dconf/profile/$l_gdmprofile" ]; then
                echo "Creating profile \"$l_gdmprofile\""
                echo -e "user-db:user\nsystem-db:$l_gdmprofile\nfile-db:/usr/share/$l_gdmprofile/greeter-dconf-defaults" > /etc/dconf/profile/$l_gdmprofile
        fi
        if [ ! -d "/etc/dconf/db/$l_gdmprofile.d/" ]; then
                echo "Creating dconf database directory \"/etc/dconf/db/$l_gdmprofile.d/\""
                mkdir /etc/dconf/db/$l_gdmprofile.d/
        fi
        if ! grep -Piq ^h*disable-user-listh*=h*trueb /etc/dconf/db/$l_gdmprofile.d/*; then
                echo "creating gdm keyfile for machine-wide settings"
                if ! grep -Piq -- ^h*[org/gnome/login-screen] /etc/dconf/db/$l_gdmprofile.d/*; then
                        echo -e "\n[org/gnome/login-screen]\n# Do not show the user list\ndisable-user-list=true" >> /etc/dconf/db/$l_gdmprofile.d/00-login-screen
                else
                        sed -ri /^s*[org/gnome/login-screen]/ a# Do not show the user listndisable-user-list=true $(grep -Pil -- ^h*[org/gnome/login-screen] /etc/dconf/db/$l_gdmprofile.d/*)
                fi
        fi
        dconf update
}

OR

Run the following command to remove the GNOME package:
apt purge gdm3

Explanation: 
This audit it to verify GDM disable-user-list option is enabled, disable-user-list option is enabled or GNOME isn't installed, since the evidence displayed is unable to verify the audit, therefore the compliane is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.8.4 Ensure GDM screen locks when the user is idle (Automated)

Evidence: 


 - Package: "gdm3" exists on the system
 - checking configuration

- Audit Result:
 ** FAIL **
 - Reason(s) for audit failure:

 - The "idle-delay" option doesn't exist, remaining tests skipped

Rationale: 
Setting a lock-out value reduces the window of opportunity for unauthorized user access to another user's session that has been left unattended.

Remediation: 
Create or edit a file in the /etc/dconf/profile/ and verify it includes the following:
user-db:user
system-db:{NAME_OF_DCONF_DATABASE}
Note: local is the name of a dconf database used in the examples.
Example:
echo -e '\nuser-db:user\nsystem-db:local' >> /etc/dconf/profile/user
Create the directory /etc/dconf/db/{NAME_OF_DCONF_DATABASE}.d/ if it doesn't already exist:
Example:
mkdir /etc/dconf/db/local.d
Create the key file `/etc/dconf/db/{NAME_OF_DCONF_DATABASE}.d/{FILE_NAME} to provide information for the {NAME_OF_DCONF_DATABASE} database:
Example script:

#!/usr/bin/env bash

{
        l_key_file="/etc/dconf/db/local.d/00-screensaver"
        l_idmv="900" # Set max value for idle-delay in seconds (between 1 and 900)
        l_ldmv="5" # Set max value for lock-delay in seconds (between 0 and 5)
        {
                echo '# Specify the dconf path'
                echo '[org/gnome/desktop/session]'
                echo ''
                echo '# Number of seconds of inactivity before the screen goes blank'
                echo '# Set to 0 seconds if you want to deactivate the screensaver.'
                echo "idle-delay=uint32 $l_idmv"
                echo ''
                echo '# Specify the dconf path'
                echo '[org/gnome/desktop/screensaver]'
                echo ''
                echo '# Number of seconds after the screen is blank before locking the screen'
                echo "lock-delay=uint32 $l_ldmv"
        } > "$l_key_file"
}
Note: You must include the uint32 along with the integer key values as shown.

Run the following command to update the system databases:
dconf update
Note: Users must log out and back in again before the system-wide settings take effect.

Explanation: 
This audit is to verify that GDM screen locks when the user is idle, since the evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.8.5 Ensure GDM screen locks cannot be overridden (Automated)

Evidence: 


 - Package: "gdm3" exists on the system
 - checking configuration

- Audit Result:
 ** FAIL **
 - Reason(s) for audit failure:

 - "idle-delay" is not set so it can not be locked
 - "lock-delay" is not set so it can not be locked

Rationale: 
Setting a lock-out value reduces the window of opportunity for unauthorized user access to another user's session that has been left unattended.
Without locking down the system settings, user settings take precedence over the system settings.

Remediation: 
Run the following script to ensure screen locks can not be overridden:

#!/usr/bin/env bash

{
        # Check if GNMOE Desktop Manager is installed. If package isn't installed, recommendation is Not Applicable\n
        # determine system's package manager
        l_pkgoutput=""
        if command -v dpkg-query > /dev/null 2>&1; then
                l_pq="dpkg-query -W"
        elif command -v rpm > /dev/null 2>&1; then
                l_pq="rpm -q"
        fi
        # Check if GDM is installed
        l_pcl="gdm gdm3" # Space seporated list of packages to check
        for l_pn in $l_pcl; do
                $l_pq "$l_pn" > /dev/null 2>&1 && l_pkgoutput="y" && echo -e "\n -Package: \"$l_pn\" exists on the system\n - remediating configuration if needed"
        done
        # Check configuration (If applicable)
        if [ -n "$l_pkgoutput" ]; then
                # Look for idle-delay to determine profile in use, needed for remaining tests
                l_kfd="/etc/dconf/db/$(grep -Psril '^\h*idledelay\h*=\h*uint32\h+\d+\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,".");print a[1]}' ).d" #set directory of key file to be locked
                # Look for lock-delay to determine profile in use, needed for remaining tests
                l_kfd2="/etc/dconf/db/$(grep -Psril '^\h*lockdelay\h*=\h*uint32\h+\d+\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,".");print a[1]}' ).d" #set directory of key file to be locked
                if [ -d "$l_kfd" ]; then # If key file directory doesnt exist, options cant be locked
                        if grep -Prilq ^h*/org/gnome/desktop/session/idle-delayb "$l_kfd"; then
                                echo " - \"idle-delay\" is locked in \"$(grep -Pril ^h*/org/gnome/desktop/session/idle-delayb "$l_kfd")\""
                        else
                                echo "creating entry to lock \"idle-delay\""
                                [ ! -d "$l_kfd"/locks ] && echo "creating directory $l_kfd/locks" && mkdir "$l_kfd"/locks
                                {
                                        echo -e '\n# Lock desktop screensaver idle-delay setting'
                                        echo '/org/gnome/desktop/session/idle-delay'
                                } >> "$l_kfd"/locks/00-screensaver
                        fi
                else
                        echo -e " - \"idle-delay\" is not set so it can not be locked\n - Please follow Recommendation \"Ensure GDM screen locks when the user is idle\" and follow this Recommendation again"
                fi
                if [ -d "$l_kfd2" ]; then # If key file directory doesnt exist, options cant be locked
                        if grep -Prilq ^h*/org/gnome/desktop/screensaver/lockdelayb "$l_kfd2"; then
                                echo " - \"lock-delay\" is locked in \"$(grep -Pril ^h*/org/gnome/desktop/screensaver/lock-delayb "$l_kfd2")\""
                        else
                                echo "creating entry to lock \"lock-delay\""
                                [ ! -d "$l_kfd2"/locks ] && echo "creating directory $l_kfd2/locks" && mkdir "$l_kfd2"/locks
                                {
                                        echo -e '\n# Lock desktop screensaver lock-delay setting'
                                        echo '/org/gnome/desktop/screensaver/lock-delay'
                                } >> "$l_kfd2"/locks/00-screensaver
                        fi
                else
                        echo -e " - \"lock-delay\" is not set so it can not be locked\n - Please follow Recommendation \"Ensure GDM screen locks when the user is idle\" and follow this Recommendation again"
                fi
        else
                echo -e " - GNOME Desktop Manager package is not installed on the system\n - Recommendation is not applicable"
        fi
}

Run the following command to update the system databases:
dconf update
Note: Users must log out and back in again before the system-wide settings take effect.

Explanation: 
This audit is to verify GDM screen locks cannot be overridden, since evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.8.6 Ensure GDM automatic mounting of removable media is disabled (Automated)

Evidence: 

 - Package: "gdm3" exists on the system
 - checking configuration

- Audit Result:
 ** FAIL **
 - Reason(s) for audit failure:

 - neither "automount" or "automount-open" is set

Rationale: 
With automounting enabled anyone with physical access could attach a USB drive or disc and have its contents available in system even if they lacked permissions to mount it themselves.

Remediation: 
Run the following script to disable automatic mounting of media for all GNOME users:

#!/usr/bin/env bash

{
        l_pkgoutput="" l_output="" l_output2=""
        l_gpbame="local" # Set to desired dconf profile name (defaule is local)
        # Check if GNOME Desktop Manager is installed. If package isn't installed, recommendation is Not Applicable\n
        # determine system's package manager
        if command -v dpkg-query > /dev/null 2>&1; then
                l_pq="dpkg-query -W"
        elif command -v rpm > /dev/null 2>&1; then
                l_pq="rpm -q"
        fi
        # Check if GDM is installed
        l_pcl="gdm gdm3" # Space seporated list of packages to check
        for l_pn in $l_pcl; do
                $l_pq "$l_pn" > /dev/null 2>&1 && l_pkgoutput="$l_pkgoutput\n - Package: \"$l_pn\" exists on the system\n - checking configuration"
        done
        echo -e "$l_packageout"
        # Check configuration (If applicable)
        if [ -n "$l_pkgoutput" ]; then
                echo -e "$l_pkgoutput"
                # Look for existing settings and set variables if they exist
                l_kfile="$(grep -Prils -- ^h*automountb /etc/dconf/db/*.d)"
                l_kfile2="$(grep -Prils -- ^h*automount-openb /etc/dconf/db/*.d)"
                # Set profile name based on dconf db directory ({PROFILE_NAME}.d)
                if [ -f "$l_kfile" ]; then
                        l_gpname="$(awk -F\/ '{split($(NF-1),a,".");print a[1]}' <<< "$l_kfile")"
                        echo " - updating dconf profile name to \"$l_gpname\""
                elif [ -f "$l_kfile2" ]; then
                        l_gpname="$(awk -F\/ '{split($(NF-1),a,".");print a[1]}' <<< "$l_kfile2")"
                        echo " - updating dconf profile name to \"$l_gpname\""
                fi
                # check for consistency (Clean up configuration if needed)
                if [ -f "$l_kfile" ] && [ "$(awk -F\/ '{split($(NF-1),a,".");print a[1]}' <<< "$l_kfile")" != "$l_gpname" ]; then
                        sed -ri "/^\s*automount\s*=/s/^/# /" "$l_kfile"
                        l_kfile="/etc/dconf/db/$l_gpname.d/00-media-automount"
                fi
                if [ -f "$l_kfile2" ] && [ "$(awk -F\/ '{split($(NF-1),a,".");print a[1]}' <<< "$l_kfile2")" != "$l_gpname" ]; then
                        sed -ri "/^\s*automount-open\s*=/s/^/# /" "$l_kfile2"
                fi
                [ -n "$l_kfile" ] && l_kfile="/etc/dconf/db/$l_gpname.d/00-media-automount"
                # Check if profile file exists
                if grep -Pq -- "^\h*system-db:$l_gpname\b" /etc/dconf/profile/*; then
                        echo -e "\n - dconf database profile exists in: \"$(grep -Pl -- "^\h*system-db:$l_gpname\b" /etc/dconf/profile/*)\""
                else
                        [ ! -f "/etc/dconf/profile/user" ] && l_gpfile="/etc/dconf/profile/user" || l_gpfile="/etc/dconf/profile/user2"
                        echo -e " - creating dconf database profile"
                        {
                                echo -e "\nuser-db:user"
                                echo "system-db:$l_gpname"
                        } >> "$l_gpfile"
                fi
                # create dconf directory if it doesn't exists
                l_gpdir="/etc/dconf/db/$l_gpname.d"
                if [ -d "$l_gpdir" ]; then
                        echo " - The dconf database directory \"$l_gpdir\" exists"
                else
                        echo " - creating dconf database directory \"$l_gpdir\""
                        mkdir "$l_gpdir"
                fi
                # check automount-open setting
                if grep -Pqs -- ^h*automount-openh*=h*falseb "$l_kfile"; then
                        echo " - \"automount-open\" is set to false in: \"$l_kfile\""
                else
                        echo " - creating \"automount-open\" entry in \"$l_kfile\""
                        ! grep -Psq -- ^h*[org/gnome/desktop/media-handling]b "$l_kfile" && echo [org/gnome/desktop/media-handling] >> "$l_kfile"
                        sed -ri '/^\s*\[org\/gnome\/desktop\/media-handling\]/a\nautomount-open=false'
                fi
                # check automount setting
                if grep -Pqs -- ^h*automounth*=h*falseb "$l_kfile"; then
                        echo " - \"automount\" is set to false in: \"$l_kfile\""
                else
                        echo " - creating \"automount\" entry in \"$l_kfile\""
                        ! grep -Psq -- ^h*[org/gnome/desktop/media-handling]b "$l_kfile" && echo [org/gnome/desktop/media-handling] >> "$l_kfile"
                        sed -ri '/^\s*\[org\/gnome\/desktop\/media-handling\]/a\nautomount=false'
                fi
        else
                echo -e "\n - GNOME Desktop Manager package is not installed on the system\n - Recommendation is not applicable"
        fi
        # update dconf database
        dconf update
}

OR

Run the following command to uninstall the GNOME desktop Manager package:
apt purge gdm3

Explanation: 
This audit is to verify GDM automatic mounting of removable media is disabled, since the evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.8.7 Ensure GDM disabling automatic mounting of removable media is not overridden (Automated)

Evidence: 


 - Package: "gdm3" exists on the system
 - checking configuration

- Audit Result:
 ** FAIL **
 - Reason(s) for audit failure:

 - "automount" is not set, so it cannot be locked
 - "automount-open" is not set, so it cannot be locked

Rationale: 
With automounting enabled anyone with physical access could attach a USB drive or disc and have its contents available in system even if they lacked permissions to mount it themselves.

Remediation: 
Run the following script to lock disable automatic mounting of media for all GNOME users:

#!/usr/bin/env bash

{
        # Check if GNMOE Desktop Manager is installed. If package isn't installed, recommendation is Not Applicable\n
        # determine system's package manager
        l_pkgoutput=""
        if command -v dpkg-query > /dev/null 2>&1; then
                l_pq="dpkg-query -W"
        elif command -v rpm > /dev/null 2>&1; then
                l_pq="rpm -q"
        fi
        # Check if GDM is installed
        l_pcl="gdm gdm3" # Space seporated list of packages to check
        for l_pn in $l_pcl; do
                $l_pq "$l_pn" > /dev/null 2>&1 && l_pkgoutput="y" && echo -e "\n - Package: \"$l_pn\" exists on the system\n - remediating configuration if needed"
        done
        # Check configuration (If applicable)
        if [ -n "$l_pkgoutput" ]; then
                # Look for automount to determine profile in use, needed for remaining tests
                l_kfd="/etc/dconf/db/$(grep -Psril '^\h*automount\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,".");print a[1]}' ).d" #set directory of key file to be locked
                # Look for automount-open to determine profile in use, needed for remaining tests
                l_kfd2="/etc/dconf/db/$(grep -Psril '^\h*automount-open\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,".");print a[1]}' ).d" #set directory of key file to be locked
                if [ -d "$l_kfd" ]; then # If key file directory doesnt exist, options cant be locked
                        if grep -Priq ^h*/org/gnome/desktop/mediahandling/automountb "$l_kfd"; then
                                echo " - \"automount\" is locked in \"$(grep -Pril ^h*/org/gnome/desktop/media-handling/automountb "$l_kfd")\""
                        else
                                echo " - creating entry to lock \"automount\""
                                [ ! -d "$l_kfd"/locks ] && echo "creating directory $l_kfd/locks" && mkdir "$l_kfd"/locks
                                {
                                        echo -e '\n# Lock desktop media-handling automount setting'
                                        echo '/org/gnome/desktop/media-handling/automount'
                                } >> "$l_kfd"/locks/00-media-automount
                        fi
                else
                        echo -e " - \"automount\" is not set so it can not be locked\n - Please follow Recommendation \"Ensure GDM automatic mounting of removable media is disabled\" and follow this Recommendation again"
                fi
                if [ -d "$l_kfd2" ]; then # If key file directory doesnt exist, options cant be locked
                        if grep -Priq ^h*/org/gnome/desktop/media-handling/automountopenb "$l_kfd2"; then
                                echo " - \"automount-open\" is locked in \"$(grep -Pril ^h*/org/gnome/desktop/media-handling/automount-openb "$l_kfd2")\""
                        else
                                echo " - creating entry to lock \"automount-open\""
                                [ ! -d "$l_kfd2"/locks ] && echo "creating directory $l_kfd2/locks" && mkdir "$l_kfd2"/locks
                                {
                                        echo -e '\n# Lock desktop media-handling automount-open setting'
                                        echo '/org/gnome/desktop/media-handling/automount-open'
                                } >> "$l_kfd2"/locks/00-media-automount
                        fi
                else
                        echo -e " - \"automount-open\" is not set so it can not be locked\n - Please follow Recommendation \"Ensure GDM automatic mounting of removable media is disabled\" and follow this Recommendation again"
                fi
                # update dconf database
                dconf update
        else
                echo -e " - GNOME Desktop Manager package is not installed on the system\n - Recommendation is not applicable"
        fi
}

Explanation: 
This audit is to verify GDM disabling automatic mounting of removable media is not overridden, disable automatic mounting is locked, since the evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.8.8 Ensure GDM autorun-never is enabled (Automated)

Evidence: 


 - Package: "gdm3" exists on the system
 - checking configuration

- Audit Result:
 ** FAIL **
 - Reason(s) for audit failure:

 - "autorun-never" is not set

Rationale: 
Malware on removable media may taking advantage of Autorun features when the media is inserted into a system and execute.

Remediation: 
Run the following script to set autorun-never to true for GDM users:

#!/usr/bin/env bash

{
        l_pkgoutput="" l_output="" l_output2=""
        l_gpname="local" # Set to desired dconf profile name (default is local)
        # Check if GNOME Desktop Manager is installed. If package isn't installed, recommendation is Not Applicable\n
        # determine system's package manager
        if command -v dpkg-query > /dev/null 2>&1; then
                l_pq="dpkg-query -W"
        elif command -v rpm > /dev/null 2>&1; then
                l_pq="rpm -q"
        fi
        # Check if GDM is installed
        l_pcl="gdm gdm3" # Space separated list of packages to check
        for l_pn in $l_pcl; do
                $l_pq "$l_pn" > /dev/null 2>&1 && l_pkgoutput="$l_pkgoutput\n - Package: \"$l_pn\" exists on the system\n - checking configuration"
        done
        echo -e "$l_pkgoutput"
        # Check configuration (If applicable)
        if [ -n "$l_pkgoutput" ]; then
                echo -e "$l_pkgoutput"
                # Look for existing settings and set variables if they exist
                l_kfile="$(grep -Prils -- ^h*autorun-neverb /etc/dconf/db/*.d)"
                # Set profile name based on dconf db directory ({PROFILE_NAME}.d)
                if [ -f "$l_kfile" ]; then
                        l_gpname="$(awk -F\/ '{split($(NF-1),a,".");print a[1]}' <<< "$l_kfile")"
                        echo " - updating dconf profile name to \"$l_gpname\""
                fi
                [ ! -f "$l_kfile" ] && l_kfile="/etc/dconf/db/$l_gpname.d/00-mediaautorun"
                # Check if profile file exists
                if grep -Pq -- "^\h*system-db:$l_gpname\b" /etc/dconf/profile/*; then
                        echo -e "\n - dconf database profile exists in: \"$(grep -Pl -- "^\h*system-db:$l_gpname\b" /etc/dconf/profile/*)\""
                else
                        [ ! -f "/etc/dconf/profile/user" ] && l_gpfile="/etc/dconf/profile/user" || l_gpfile="/etc/dconf/profile/user2"
                        echo -e " - creating dconf database profile"
                        {
                                echo -e "\nuser-db:user"
                                echo "system-db:$l_gpname"
                        } >> "$l_gpfile"
                fi
                # create dconf directory if it doesn't exists
                l_gpdir="/etc/dconf/db/$l_gpname.d"
                if [ -d "$l_gpdir" ]; then
                        echo " - The dconf database directory \"$l_gpdir\" exists"
                else
                        echo " - creating dconf database directory \"$l_gpdir\""
                        mkdir "$l_gpdir"
                fi
                # check autorun-never setting
                if grep -Pqs -- ^h*autorun-neverh*=h*trueb "$l_kfile"; then
                        echo " - \"autorun-never\" is set to true in: \"$l_kfile\""
                else
                        echo " - creating or updating \"autorun-never\" entry in \"$l_kfile\""
                        if grep -Psq -- ^h*autorun-never "$l_kfile"; then
                                sed -ri 's/(^\s*autorun-never\s*=\s*)(\S+)(\s*.*)$/\1true \3/' "$l_kfile"
                        else
                                ! grep -Psq -- ^h*[org/gnome/desktop/media-handling]b "$l_kfile" && echo [org/gnome/desktop/media-handling] >> "$l_kfile"
                                sed -ri /^s*[org/gnome/desktop/media-handling]/a\nautorun-never=true "$l_kfile"
                        fi
                fi
        else
                echo -e "\n - GNOME Desktop Manager package is not installed on the system\n - Recommendation is not applicable"
        fi
        # update dconf database
        dconf update
}

Explanation: 
This audit is to verify GDM autorun-never is enabled, autorun-never is set to true for GDM, since the evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

#########################################################################################################################

Title: 1.8.9 Ensure GDM autorun-never is not overridden (Automated)

Evidence: 


 - Package: "gdm3" exists on the system
 - checking configuration

- Audit Result:
 ** FAIL **
 - Reason(s) for audit failure:

 - "autorun-never" is not set, so it cannot be locked

Rationale: 
Malware on removable media may taking advantage of Autorun features when the media is inserted into a system and execute.

Remediation: 
Run the following script to ensure that autorun-never=true cannot be overridden:

#!/usr/bin/env bash

{
        # Check if GNOME Desktop Manager is installed. If package isn't installed, recommendation is Not Applicable\n
        # determine system's package manager
        l_pkgoutput=""
        if command -v dpkg-query > /dev/null 2>&1; then
                l_pq="dpkg-query -W"
        elif command -v rpm > /dev/null 2>&1; then
                l_pq="rpm -q"
        fi
        # Check if GDM is installed
        l_pcl="gdm gdm3" # Space separated list of packages to check
        for l_pn in $l_pcl; do
                $l_pq "$l_pn" > /dev/null 2>&1 && l_pkgoutput="y" && echo -e "\n - Package: \"$l_pn\" exists on the system\n - remediating configuration if needed"
        done
        # Check configuration (If applicable)
        if [ -n "$l_pkgoutput" ]; then
                # Look for autorun to determine profile in use, needed for remaining tests
                l_kfd="/etc/dconf/db/$(grep -Psril '^\h*autorun-never\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,".");print a[1]}' ).d" #set directory of key file to be locked
                if [ -d "$l_kfd" ]; then # If key file directory doesnt exist, options cant be locked
                        if grep -Priq ^h*/org/gnome/desktop/media-handling/autorunneverb "$l_kfd"; then
                                echo " - \"autorun-never\" is locked in \"$(grep -Pril ^h*/org/gnome/desktop/media-handling/autorun-neverb "$l_kfd")\""
                        else
                                echo " - creating entry to lock \"autorun-never\""
                                [ ! -d "$l_kfd"/locks ] && echo "creating directory $l_kfd/locks" && mkdir "$l_kfd"/locks
                                {
                                        echo -e '\n# Lock desktop media-handling autorun-never setting'
                                        echo '/org/gnome/desktop/media-handling/autorun-never'
                                } >> "$l_kfd"/locks/00-media-autorun
                        fi
                else
                        echo -e " - \"autorun-never\" is not set so it can not be locked\n - Please follow Recommendation \"Ensure GDM autorun-never is enabled\" and follow this Recommendation again"
                fi
                # update dconf database
                dconf update
        else
                echo -e " - GNOME Desktop Manager package is not installed on the system\n - Recommendation is not applicable"
        fi
}

Explanation: 
This audit is to verify GDM autorun-never is not overridden, since the evidence displayed is unable to verify the audit, therefore the compliance is a fail.

#########################################################################################################################

